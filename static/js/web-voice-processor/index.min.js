var WebVoiceProcessor=function(A){"use strict";function I(A,I,g,C,i,B,c){try{var o=A[B](c),l=o.value}catch(A){return void g(A)}o.done?I(l):Promise.resolve(l).then(C,i)}function g(A){return function(){var g=this,C=arguments;return new Promise((function(i,B){var c=A.apply(g,C);function o(A){I(c,i,B,o,l,"next",A)}function l(A){I(c,i,B,o,l,"throw",A)}o(void 0)}))}}function C(A){var I={exports:{}};return A(I,I.exports),I.exports}var i,B=C((function(A){function I(g){return A.exports=I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(A){return typeof A}:function(A){return A&&"function"==typeof Symbol&&A.constructor===Symbol&&A!==Symbol.prototype?"symbol":typeof A},A.exports.__esModule=!0,A.exports.default=A.exports,I(g)}A.exports=I,A.exports.__esModule=!0,A.exports.default=A.exports})),c=C((function(A){var I=B.default;function g(){A.exports=g=function(){return C},A.exports.__esModule=!0,A.exports.default=A.exports;var C={},i=Object.prototype,B=i.hasOwnProperty,c=Object.defineProperty||function(A,I,g){A[I]=g.value},o="function"==typeof Symbol?Symbol:{},l=o.iterator||"@@iterator",e=o.asyncIterator||"@@asyncIterator",n=o.toStringTag||"@@toStringTag";function t(A,I,g){return Object.defineProperty(A,I,{value:g,enumerable:!0,configurable:!0,writable:!0}),A[I]}try{t({},"")}catch(A){t=function(A,I,g){return A[I]=g}}function Z(A,I,g,C){var i=I&&I.prototype instanceof G?I:G,B=Object.create(i.prototype),o=new w(C||[]);return c(B,"_invoke",{value:X(A,g,o)}),B}function d(A,I,g){try{return{type:"normal",arg:A.call(I,g)}}catch(A){return{type:"throw",arg:A}}}C.wrap=Z;var b={};function G(){}function m(){}function a(){}var s={};t(s,l,(function(){return this}));var Q=Object.getPrototypeOf,u=Q&&Q(Q(E([])));u&&u!==i&&B.call(u,l)&&(s=u);var r=a.prototype=G.prototype=Object.create(s);function y(A){["next","throw","return"].forEach((function(I){t(A,I,(function(A){return this._invoke(I,A)}))}))}function h(A,g){function C(i,c,o,l){var e=d(A[i],A,c);if("throw"!==e.type){var n=e.arg,t=n.value;return t&&"object"==I(t)&&B.call(t,"__await")?g.resolve(t.__await).then((function(A){C("next",A,o,l)}),(function(A){C("throw",A,o,l)})):g.resolve(t).then((function(A){n.value=A,o(n)}),(function(A){return C("throw",A,o,l)}))}l(e.arg)}var i;c(this,"_invoke",{value:function(A,I){function B(){return new g((function(g,i){C(A,I,g,i)}))}return i=i?i.then(B,B):B()}})}function X(A,I,g){var C="suspendedStart";return function(i,B){if("executing"===C)throw new Error("Generator is already running");if("completed"===C){if("throw"===i)throw B;return J()}for(g.method=i,g.arg=B;;){var c=g.delegate;if(c){var o=V(c,g);if(o){if(o===b)continue;return o}}if("next"===g.method)g.sent=g._sent=g.arg;else if("throw"===g.method){if("suspendedStart"===C)throw C="completed",g.arg;g.dispatchException(g.arg)}else"return"===g.method&&g.abrupt("return",g.arg);C="executing";var l=d(A,I,g);if("normal"===l.type){if(C=g.done?"completed":"suspendedYield",l.arg===b)continue;return{value:l.arg,done:g.done}}"throw"===l.type&&(C="completed",g.method="throw",g.arg=l.arg)}}}function V(A,I){var g=I.method,C=A.iterator[g];if(void 0===C)return I.delegate=null,"throw"===g&&A.iterator.return&&(I.method="return",I.arg=void 0,V(A,I),"throw"===I.method)||"return"!==g&&(I.method="throw",I.arg=new TypeError("The iterator does not provide a '"+g+"' method")),b;var i=d(C,A.iterator,I.arg);if("throw"===i.type)return I.method="throw",I.arg=i.arg,I.delegate=null,b;var B=i.arg;return B?B.done?(I[A.resultName]=B.value,I.next=A.nextLoc,"return"!==I.method&&(I.method="next",I.arg=void 0),I.delegate=null,b):B:(I.method="throw",I.arg=new TypeError("iterator result is not an object"),I.delegate=null,b)}function R(A){var I={tryLoc:A[0]};1 in A&&(I.catchLoc=A[1]),2 in A&&(I.finallyLoc=A[2],I.afterLoc=A[3]),this.tryEntries.push(I)}function W(A){var I=A.completion||{};I.type="normal",delete I.arg,A.completion=I}function w(A){this.tryEntries=[{tryLoc:"root"}],A.forEach(R,this),this.reset(!0)}function E(A){if(A){var I=A[l];if(I)return I.call(A);if("function"==typeof A.next)return A;if(!isNaN(A.length)){var g=-1,C=function I(){for(;++g<A.length;)if(B.call(A,g))return I.value=A[g],I.done=!1,I;return I.value=void 0,I.done=!0,I};return C.next=C}}return{next:J}}function J(){return{value:void 0,done:!0}}return m.prototype=a,c(r,"constructor",{value:a,configurable:!0}),c(a,"constructor",{value:m,configurable:!0}),m.displayName=t(a,n,"GeneratorFunction"),C.isGeneratorFunction=function(A){var I="function"==typeof A&&A.constructor;return!!I&&(I===m||"GeneratorFunction"===(I.displayName||I.name))},C.mark=function(A){return Object.setPrototypeOf?Object.setPrototypeOf(A,a):(A.__proto__=a,t(A,n,"GeneratorFunction")),A.prototype=Object.create(r),A},C.awrap=function(A){return{__await:A}},y(h.prototype),t(h.prototype,e,(function(){return this})),C.AsyncIterator=h,C.async=function(A,I,g,i,B){void 0===B&&(B=Promise);var c=new h(Z(A,I,g,i),B);return C.isGeneratorFunction(I)?c:c.next().then((function(A){return A.done?A.value:c.next()}))},y(r),t(r,n,"Generator"),t(r,l,(function(){return this})),t(r,"toString",(function(){return"[object Generator]"})),C.keys=function(A){var I=Object(A),g=[];for(var C in I)g.push(C);return g.reverse(),function A(){for(;g.length;){var C=g.pop();if(C in I)return A.value=C,A.done=!1,A}return A.done=!0,A}},C.values=E,w.prototype={constructor:w,reset:function(A){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(W),!A)for(var I in this)"t"===I.charAt(0)&&B.call(this,I)&&!isNaN(+I.slice(1))&&(this[I]=void 0)},stop:function(){this.done=!0;var A=this.tryEntries[0].completion;if("throw"===A.type)throw A.arg;return this.rval},dispatchException:function(A){if(this.done)throw A;var I=this;function g(g,C){return c.type="throw",c.arg=A,I.next=g,C&&(I.method="next",I.arg=void 0),!!C}for(var C=this.tryEntries.length-1;C>=0;--C){var i=this.tryEntries[C],c=i.completion;if("root"===i.tryLoc)return g("end");if(i.tryLoc<=this.prev){var o=B.call(i,"catchLoc"),l=B.call(i,"finallyLoc");if(o&&l){if(this.prev<i.catchLoc)return g(i.catchLoc,!0);if(this.prev<i.finallyLoc)return g(i.finallyLoc)}else if(o){if(this.prev<i.catchLoc)return g(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return g(i.finallyLoc)}}}},abrupt:function(A,I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.tryLoc<=this.prev&&B.call(C,"finallyLoc")&&this.prev<C.finallyLoc){var i=C;break}}i&&("break"===A||"continue"===A)&&i.tryLoc<=I&&I<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=A,c.arg=I,i?(this.method="next",this.next=i.finallyLoc,b):this.complete(c)},complete:function(A,I){if("throw"===A.type)throw A.arg;return"break"===A.type||"continue"===A.type?this.next=A.arg:"return"===A.type?(this.rval=this.arg=A.arg,this.method="return",this.next="end"):"normal"===A.type&&I&&(this.next=I),b},finish:function(A){for(var I=this.tryEntries.length-1;I>=0;--I){var g=this.tryEntries[I];if(g.finallyLoc===A)return this.complete(g.completion,g.afterLoc),W(g),b}},catch:function(A){for(var I=this.tryEntries.length-1;I>=0;--I){var g=this.tryEntries[I];if(g.tryLoc===A){var C=g.completion;if("throw"===C.type){var i=C.arg;W(g)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(A,I,g){return this.delegate={iterator:E(A),resultName:I,nextLoc:g},"next"===this.method&&(this.arg=void 0),b}},C}A.exports=g,A.exports.__esModule=!0,A.exports.default=A.exports})),o=c(),l=o;try{regeneratorRuntime=o}catch(A){"object"==typeof globalThis?globalThis.regeneratorRuntime=o:Function("r","regeneratorRuntime = r")(o)}function e(A){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(A){return typeof A}:function(A){return A&&"function"==typeof Symbol&&A.constructor===Symbol&&A!==Symbol.prototype?"symbol":typeof A},e(A)}function n(A){var I=function(A,I){if("object"!==e(A)||null===A)return A;var g=A[Symbol.toPrimitive];if(void 0!==g){var C=g.call(A,I||"default");if("object"!==e(C))return C;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===I?String:Number)(A)}(A,"string");return"symbol"===e(I)?I:String(I)}function t(A,I,g){return(I=n(I))in A?Object.defineProperty(A,I,{value:g,enumerable:!0,configurable:!0,writable:!0}):A[I]=g,A}function Z(A,I){for(var g=0;g<I.length;g++){var C=I[g];C.enumerable=C.enumerable||!1,C.configurable=!0,"value"in C&&(C.writable=!0),Object.defineProperty(A,n(C.key),C)}}function d(A,I,g){return I&&Z(A.prototype,I),g&&Z(A,g),Object.defineProperty(A,"prototype",{writable:!1}),A}function b(A,I){if(!(A instanceof I))throw new TypeError("Cannot call a class as a function")}function G(A,I){return G=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(A,I){return A.__proto__=I,A},G(A,I)}function m(A,I){if(I&&("object"===e(I)||"function"==typeof I))return I;if(void 0!==I)throw new TypeError("Derived constructors may only return object or undefined");return function(A){if(void 0===A)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return A}(A)}function a(A){return a=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(A){return A.__proto__||Object.getPrototypeOf(A)},a(A)}function s(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(A){return!1}}function Q(A,I,g){return Q=s()?Reflect.construct.bind():function(A,I,g){var C=[null];C.push.apply(C,I);var i=new(Function.bind.apply(A,C));return g&&G(i,g.prototype),i},Q.apply(null,arguments)}function u(A){var I="function"==typeof Map?new Map:void 0;return u=function(A){if(null===A||(g=A,-1===Function.toString.call(g).indexOf("[native code]")))return A;var g;if("function"!=typeof A)throw new TypeError("Super expression must either be null or a function");if(void 0!==I){if(I.has(A))return I.get(A);I.set(A,C)}function C(){return Q(A,arguments,a(this).constructor)}return C.prototype=Object.create(A.prototype,{constructor:{value:C,enumerable:!1,writable:!0,configurable:!0}}),G(C,A)},u(A)}window.AudioContext=window.AudioContext||window.webkitAudioContext,"function"==typeof AudioWorkletNode&&"audioWorklet"in AudioContext.prototype||AudioContext&&(AudioContext.prototype.audioWorklet={addModule:(i=g(l.mark((function A(I,g){return l.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return A.abrupt("return");case 1:case"end":return A.stop()}}),A)}))),function(A,I){return i.apply(this,arguments)})},window.AudioWorkletNode=function(A,I,g){var C=g&&g.processorOptions,i=C.numberOfChannels,B=void 0===i?1:i,c=C.frameLength,o=void 0===c?512:c,l=A.createScriptProcessor(o,B,B);return l.port||(l.port={}),l.onaudioprocess=function(A){if(l.port&&l.port.onmessage){for(var I=[],g=0;g<A.inputBuffer.numberOfChannels;g++)I.push(A.inputBuffer.getChannelData(g));l.port.onmessage({data:{buffer:I}})}},l.port.close=function(){},l});const r=new Error("request for lock canceled");var y=function(A,I,g,C){return new(g||(g=Promise))((function(i,B){function c(A){try{l(C.next(A))}catch(A){B(A)}}function o(A){try{l(C.throw(A))}catch(A){B(A)}}function l(A){var I;A.done?i(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(c,o)}l((C=C.apply(A,I||[])).next())}))};class h{constructor(A,I=r){if(this._maxConcurrency=A,this._cancelError=I,this._queue=[],this._waiters=[],A<=0)throw new Error("semaphore must be initialized to a positive value");this._value=A}acquire(){const A=this.isLocked(),I=new Promise(((A,I)=>this._queue.push({resolve:A,reject:I})));return A||this._dispatch(),I}runExclusive(A){return y(this,void 0,void 0,(function*(){const[I,g]=yield this.acquire();try{return yield A(I)}finally{g()}}))}waitForUnlock(){return y(this,void 0,void 0,(function*(){if(!this.isLocked())return Promise.resolve();return new Promise((A=>this._waiters.push({resolve:A})))}))}isLocked(){return this._value<=0}release(){if(this._maxConcurrency>1)throw new Error("this method is unavailable on semaphores with concurrency > 1; use the scoped release returned by acquire instead");if(this._currentReleaser){const A=this._currentReleaser;this._currentReleaser=void 0,A()}}cancel(){this._queue.forEach((A=>A.reject(this._cancelError))),this._queue=[]}_dispatch(){const A=this._queue.shift();if(!A)return;let I=!1;this._currentReleaser=()=>{I||(I=!0,this._value++,this._resolveWaiters(),this._dispatch())},A.resolve([this._value--,this._currentReleaser])}_resolveWaiters(){this._waiters.forEach((A=>A.resolve())),this._waiters=[]}}var X=function(A,I,g,C){return new(g||(g=Promise))((function(i,B){function c(A){try{l(C.next(A))}catch(A){B(A)}}function o(A){try{l(C.throw(A))}catch(A){B(A)}}function l(A){var I;A.done?i(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(c,o)}l((C=C.apply(A,I||[])).next())}))};class V{constructor(A){this._semaphore=new h(1,A)}acquire(){return X(this,void 0,void 0,(function*(){const[,A]=yield this._semaphore.acquire();return A}))}runExclusive(A){return this._semaphore.runExclusive((()=>A()))}isLocked(){return this._semaphore.isLocked()}waitForUnlock(){return this._semaphore.waitForUnlock()}release(){this._semaphore.release()}cancel(){return this._semaphore.cancel()}}function R(A,I,g,C,i,B,c){try{var o=A[B](c),l=o.value}catch(A){return void g(A)}o.done?I(l):Promise.resolve(l).then(C,i)}function W(A){var I={exports:{}};return A(I,I.exports),I.exports}var w=W((function(A){function I(g){return A.exports=I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(A){return typeof A}:function(A){return A&&"function"==typeof Symbol&&A.constructor===Symbol&&A!==Symbol.prototype?"symbol":typeof A},A.exports.__esModule=!0,A.exports.default=A.exports,I(g)}A.exports=I,A.exports.__esModule=!0,A.exports.default=A.exports})),E=W((function(A){var I=w.default;function g(){
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
A.exports=g=function(){return C},A.exports.__esModule=!0,A.exports.default=A.exports;var C={},i=Object.prototype,B=i.hasOwnProperty,c="function"==typeof Symbol?Symbol:{},o=c.iterator||"@@iterator",l=c.asyncIterator||"@@asyncIterator",e=c.toStringTag||"@@toStringTag";function n(A,I,g){return Object.defineProperty(A,I,{value:g,enumerable:!0,configurable:!0,writable:!0}),A[I]}try{n({},"")}catch(A){n=function(A,I,g){return A[I]=g}}function t(A,I,g,C){var i=I&&I.prototype instanceof b?I:b,B=Object.create(i.prototype),c=new R(C||[]);return B._invoke=function(A,I,g){var C="suspendedStart";return function(i,B){if("executing"===C)throw new Error("Generator is already running");if("completed"===C){if("throw"===i)throw B;return w()}for(g.method=i,g.arg=B;;){var c=g.delegate;if(c){var o=h(c,g);if(o){if(o===d)continue;return o}}if("next"===g.method)g.sent=g._sent=g.arg;else if("throw"===g.method){if("suspendedStart"===C)throw C="completed",g.arg;g.dispatchException(g.arg)}else"return"===g.method&&g.abrupt("return",g.arg);C="executing";var l=Z(A,I,g);if("normal"===l.type){if(C=g.done?"completed":"suspendedYield",l.arg===d)continue;return{value:l.arg,done:g.done}}"throw"===l.type&&(C="completed",g.method="throw",g.arg=l.arg)}}}(A,g,c),B}function Z(A,I,g){try{return{type:"normal",arg:A.call(I,g)}}catch(A){return{type:"throw",arg:A}}}C.wrap=t;var d={};function b(){}function G(){}function m(){}var a={};n(a,o,(function(){return this}));var s=Object.getPrototypeOf,Q=s&&s(s(W([])));Q&&Q!==i&&B.call(Q,o)&&(a=Q);var u=m.prototype=b.prototype=Object.create(a);function r(A){["next","throw","return"].forEach((function(I){n(A,I,(function(A){return this._invoke(I,A)}))}))}function y(A,g){function C(i,c,o,l){var e=Z(A[i],A,c);if("throw"!==e.type){var n=e.arg,t=n.value;return t&&"object"==I(t)&&B.call(t,"__await")?g.resolve(t.__await).then((function(A){C("next",A,o,l)}),(function(A){C("throw",A,o,l)})):g.resolve(t).then((function(A){n.value=A,o(n)}),(function(A){return C("throw",A,o,l)}))}l(e.arg)}var i;this._invoke=function(A,I){function B(){return new g((function(g,i){C(A,I,g,i)}))}return i=i?i.then(B,B):B()}}function h(A,I){var g=A.iterator[I.method];if(void 0===g){if(I.delegate=null,"throw"===I.method){if(A.iterator.return&&(I.method="return",I.arg=void 0,h(A,I),"throw"===I.method))return d;I.method="throw",I.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var C=Z(g,A.iterator,I.arg);if("throw"===C.type)return I.method="throw",I.arg=C.arg,I.delegate=null,d;var i=C.arg;return i?i.done?(I[A.resultName]=i.value,I.next=A.nextLoc,"return"!==I.method&&(I.method="next",I.arg=void 0),I.delegate=null,d):i:(I.method="throw",I.arg=new TypeError("iterator result is not an object"),I.delegate=null,d)}function X(A){var I={tryLoc:A[0]};1 in A&&(I.catchLoc=A[1]),2 in A&&(I.finallyLoc=A[2],I.afterLoc=A[3]),this.tryEntries.push(I)}function V(A){var I=A.completion||{};I.type="normal",delete I.arg,A.completion=I}function R(A){this.tryEntries=[{tryLoc:"root"}],A.forEach(X,this),this.reset(!0)}function W(A){if(A){var I=A[o];if(I)return I.call(A);if("function"==typeof A.next)return A;if(!isNaN(A.length)){var g=-1,C=function I(){for(;++g<A.length;)if(B.call(A,g))return I.value=A[g],I.done=!1,I;return I.value=void 0,I.done=!0,I};return C.next=C}}return{next:w}}function w(){return{value:void 0,done:!0}}return G.prototype=m,n(u,"constructor",m),n(m,"constructor",G),G.displayName=n(m,e,"GeneratorFunction"),C.isGeneratorFunction=function(A){var I="function"==typeof A&&A.constructor;return!!I&&(I===G||"GeneratorFunction"===(I.displayName||I.name))},C.mark=function(A){return Object.setPrototypeOf?Object.setPrototypeOf(A,m):(A.__proto__=m,n(A,e,"GeneratorFunction")),A.prototype=Object.create(u),A},C.awrap=function(A){return{__await:A}},r(y.prototype),n(y.prototype,l,(function(){return this})),C.AsyncIterator=y,C.async=function(A,I,g,i,B){void 0===B&&(B=Promise);var c=new y(t(A,I,g,i),B);return C.isGeneratorFunction(I)?c:c.next().then((function(A){return A.done?A.value:c.next()}))},r(u),n(u,e,"Generator"),n(u,o,(function(){return this})),n(u,"toString",(function(){return"[object Generator]"})),C.keys=function(A){var I=[];for(var g in A)I.push(g);return I.reverse(),function g(){for(;I.length;){var C=I.pop();if(C in A)return g.value=C,g.done=!1,g}return g.done=!0,g}},C.values=W,R.prototype={constructor:R,reset:function(A){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(V),!A)for(var I in this)"t"===I.charAt(0)&&B.call(this,I)&&!isNaN(+I.slice(1))&&(this[I]=void 0)},stop:function(){this.done=!0;var A=this.tryEntries[0].completion;if("throw"===A.type)throw A.arg;return this.rval},dispatchException:function(A){if(this.done)throw A;var I=this;function g(g,C){return c.type="throw",c.arg=A,I.next=g,C&&(I.method="next",I.arg=void 0),!!C}for(var C=this.tryEntries.length-1;C>=0;--C){var i=this.tryEntries[C],c=i.completion;if("root"===i.tryLoc)return g("end");if(i.tryLoc<=this.prev){var o=B.call(i,"catchLoc"),l=B.call(i,"finallyLoc");if(o&&l){if(this.prev<i.catchLoc)return g(i.catchLoc,!0);if(this.prev<i.finallyLoc)return g(i.finallyLoc)}else if(o){if(this.prev<i.catchLoc)return g(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return g(i.finallyLoc)}}}},abrupt:function(A,I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.tryLoc<=this.prev&&B.call(C,"finallyLoc")&&this.prev<C.finallyLoc){var i=C;break}}i&&("break"===A||"continue"===A)&&i.tryLoc<=I&&I<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=A,c.arg=I,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(c)},complete:function(A,I){if("throw"===A.type)throw A.arg;return"break"===A.type||"continue"===A.type?this.next=A.arg:"return"===A.type?(this.rval=this.arg=A.arg,this.method="return",this.next="end"):"normal"===A.type&&I&&(this.next=I),d},finish:function(A){for(var I=this.tryEntries.length-1;I>=0;--I){var g=this.tryEntries[I];if(g.finallyLoc===A)return this.complete(g.completion,g.afterLoc),V(g),d}},catch:function(A){for(var I=this.tryEntries.length-1;I>=0;--I){var g=this.tryEntries[I];if(g.tryLoc===A){var C=g.completion;if("throw"===C.type){var i=C.arg;V(g)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(A,I,g){return this.delegate={iterator:W(A),resultName:I,nextLoc:g},"next"===this.method&&(this.arg=void 0),d}},C}A.exports=g,A.exports.__esModule=!0,A.exports.default=A.exports})),J=E();function H(A,I,g){return I in A?Object.defineProperty(A,I,{value:g,enumerable:!0,configurable:!0,writable:!0}):A[I]=g,A}function Y(A,I){if(!(A instanceof I))throw new TypeError("Cannot call a class as a function")}function p(A,I){for(var g=0;g<I.length;g++){var C=I[g];C.enumerable=C.enumerable||!1,C.configurable=!0,"value"in C&&(C.writable=!0),Object.defineProperty(A,C.key,C)}}function N(A,I,g){return I&&p(A.prototype,I),g&&p(A,g),Object.defineProperty(A,"prototype",{writable:!1}),A}function F(A){if(void 0===A)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return A}function K(A,I){return K=Object.setPrototypeOf||function(A,I){return A.__proto__=I,A},K(A,I)}function f(A){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(A){return typeof A}:function(A){return A&&"function"==typeof Symbol&&A.constructor===Symbol&&A!==Symbol.prototype?"symbol":typeof A},f(A)}function k(A,I){if(I&&("object"===f(I)||"function"==typeof I))return I;if(void 0!==I)throw new TypeError("Derived constructors may only return object or undefined");return F(A)}function S(A){return S=Object.setPrototypeOf?Object.getPrototypeOf:function(A){return A.__proto__||Object.getPrototypeOf(A)},S(A)}function v(A,I){var g=Object.keys(A);if(Object.getOwnPropertySymbols){var C=Object.getOwnPropertySymbols(A);I&&(C=C.filter((function(I){return Object.getOwnPropertyDescriptor(A,I).enumerable}))),g.push.apply(g,C)}return g}var D=function(){function A(){Y(this,A),H(this,"_path",void 0),H(this,"_meta",void 0)}return N(A,[{key:"meta",get:function(){if(void 0!==this._meta)return function(A){for(var I=1;I<arguments.length;I++){var g=null!=arguments[I]?arguments[I]:{};I%2?v(Object(g),!0).forEach((function(I){H(A,I,g[I])})):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(g)):v(Object(g)).forEach((function(I){Object.defineProperty(A,I,Object.getOwnPropertyDescriptor(g,I))}))}return A}({version:0},this._meta)}}],[{key:"getPtr",value:function(I){return A._filePtrs.get(I)}},{key:"setPtr",value:function(I,g){A._filePtrs.set(I,g)}},{key:"removePtr",value:function(I){A._filePtrs.delete(I)}}]),A}();function U(A){var I=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(A){return!1}}();return function(){var g,C=S(A);if(I){var i=S(this).constructor;g=Reflect.construct(C,arguments,i)}else g=C.apply(this,arguments);return k(this,g)}}H(D,"_filePtrs",new Map);var L=function(A){!function(A,I){if("function"!=typeof I&&null!==I)throw new TypeError("Super expression must either be null or a function");A.prototype=Object.create(I&&I.prototype,{constructor:{value:A,writable:!0,configurable:!0}}),Object.defineProperty(A,"prototype",{writable:!1}),I&&K(A,I)}(i,A);var I,g,C=U(i);function i(A,I,g,B){var c;return Y(this,i),H(F(c=C.call(this)),"_pos",0),H(F(c),"_mode",void 0),c._path=A,c._meta=I,c._mode=B,c}return N(i,[{key:"close",value:function(){}},{key:"read",value:function(A,I){if(!this.exists())throw new Error("'".concat(this._path,"' doesn't exist."));if(this._isEOF){var g=new Error("EOF");throw g.name="EndOfFile",g}var C=Math.min(A*I,this._file.length-this._pos),i=C-C%A,B=new Uint8Array(i);return B.set(this._file.slice(this._pos,this._pos+i),0),this._pos+=i,B}},{key:"write",value:function(A){var I=new Uint8Array(this._pos+A.length);void 0!==this._file?(I.set(this._file.slice(0,this._pos)),I.set(A,this._pos)):I.set(A),this._file=I,this._pos+=A.length}},{key:"seek",value:function(A,I){if(!this.exists()&&"readonly"===this._mode)throw new Error("'".concat(this._path,"' doesn't exist."));if(A<0){var g=new Error("EOF");throw g.name="EndOfFile",g}var C;if(0===I)C=Math.min(A,this._file.length);else if(1===I)C=Math.min(this._pos+A,this._file.length);else{if(2!==I)throw new Error("Invalid operation: ".concat(I,"."));C=Math.min(this._file.length+A,this._file.length)}this._pos=C}},{key:"tell",value:function(){return this.exists()?this._pos:-1}},{key:"remove",value:(I=J.mark((function A(){return J.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:i._memFiles.delete(this._path),this._file=void 0,this._pos=0;case 3:case"end":return A.stop()}}),A,this)})),g=function(){var A=this,g=arguments;return new Promise((function(C,i){var B=I.apply(A,g);function c(A){R(B,C,i,c,o,"next",A)}function o(A){R(B,C,i,c,o,"throw",A)}c(void 0)}))},function(){return g.apply(this,arguments)})},{key:"exists",value:function(){return void 0!==this._file}},{key:"_isEOF",get:function(){return this._pos>=this._file.length}},{key:"_file",get:function(){return i._memFiles.get(this._path)},set:function(A){i._memFiles.set(this._path,A)}}],[{key:"open",value:function(A,I){var g=i._memFiles.get(A),C=I.includes("r")?"readonly":"readwrite";if(void 0===g&&"readonly"===C)throw new Error("'".concat(A,"' doesn't exist."));var B=new i(A,void 0,void 0,C);return I.includes("a")&&B.seek(0,2),B}}]),i}(D);function x(A,I){for(var g=I;0!==A[g];)g++;return new TextDecoder("utf-8").decode(A.subarray(I,g))}function M(A){for(var I=atob(A),g=new Uint8Array(I.length),C=0;C<I.length;C++)g[C]=I.charCodeAt(C);return g}function z(A,I,g){var C=void 0===I?null:I,i=function(A,I){var g=atob(A);if(I){for(var C=new Uint8Array(g.length),i=0,B=g.length;i<B;++i)C[i]=g.charCodeAt(i);return String.fromCharCode.apply(null,new Uint16Array(C.buffer))}return g}(A,void 0!==g&&g),B=i.indexOf("\n",10)+1,c=i.substring(B)+(C?"//# sourceMappingURL="+C:""),o=new Blob([c],{type:"application/javascript"});return URL.createObjectURL(o)}function j(A,I,g){var C;return function(i){return C=C||z(A,I,g),new Worker(C,i)}}H(L,"_memFiles",new Map);var T=j("",null,!1),O=function(){function A(I,g){b(this,A),t(this,"_worker",void 0),t(this,"_version",void 0),this._worker=I,this._version=g}var I;return d(A,[{key:"process",value:function(A){this._worker.postMessage({command:"process",inputFrame:A},[A.buffer])}},{key:"reset",value:function(){var A=this,I=new Promise((function(I,g){A._worker.onmessage=function(A){switch(A.data.command){case"ok":I();break;case"failed":case"error":g(A.data.message);break;default:g("Unrecognized command: ".concat(A.data.command))}}}));return this._worker.postMessage({command:"reset"}),I}},{key:"release",value:function(){var A=this,I=new Promise((function(I,g){A._worker.onmessage=function(A){switch(A.data.command){case"ok":I();break;case"failed":case"error":g(A.data.message);break;default:g("Unrecognized command: ".concat(A.data.command))}}}));return this._worker.postMessage({command:"release"}),I}},{key:"terminate",value:function(){this._worker.terminate()}},{key:"getNumRequiredInputSamples",value:function(A){var I=this,g=new Promise((function(A,g){I._worker.onmessage=function(I){switch(I.data.command){case"ok":A(I.data.result);break;case"failed":case"error":g(I.data.message);break;default:g("Unrecognized command: ".concat(I.data.command))}}}));return this._worker.postMessage({command:"numRequiredInputSamples",numSample:A}),g}}],[{key:"setWasm",value:function(A){void 0===this._wasm&&(this._wasm=A)}},{key:"create",value:(I=g(l.mark((function I(g,C,i,B,c){var o,e,n=this;return l.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return o=new T,e=new Promise((function(I,g){n.worker=o,o.onmessage=function(C){switch(C.data.command){case"ok":o.onmessage=function(A){switch(A.data.command){case"ok":c(A.data.result);break;case"failed":case"error":console.error(A.data.message);break;default:console.error("Unrecognized command: ".concat(C.data.command))}},I(new A(o,C.data.version));break;case"failed":case"error":g(C.data.message);break;default:g("Unrecognized command: ".concat(C.data.command))}}})),o.postMessage({command:"init",wasm:this._wasm,inputSampleRate:g,outputSampleRate:C,filterOrder:i,frameLength:B}),I.abrupt("return",e);case 4:case"end":return I.stop()}}),I,this)}))),function(A,g,C,i,B){return I.apply(this,arguments)})}]),A}();t(O,"_wasm",void 0);var P;!function(A){A[A.STARTED=0]="STARTED",A[A.STOPPED=1]="STOPPED"}(P||(P={}));var q=function(){function A(){b(this,A),t(this,"_buffers",[])}return d(A,[{key:"onmessage",value:function(A){if("process"===A.data.command)this._buffers.push(A.data.inputFrame)}},{key:"onend",value:function(){return new Blob(this._buffers)}}]),A}();function _(A,I){var g="undefined"!=typeof Symbol&&A[Symbol.iterator]||A["@@iterator"];if(!g){if(Array.isArray(A)||(g=function(A,I){if(!A)return;if("string"==typeof A)return $(A,I);var g=Object.prototype.toString.call(A).slice(8,-1);"Object"===g&&A.constructor&&(g=A.constructor.name);if("Map"===g||"Set"===g)return Array.from(A);if("Arguments"===g||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(g))return $(A,I)}(A))||I&&A&&"number"==typeof A.length){g&&(A=g);var C=0,i=function(){};return{s:i,n:function(){return C>=A.length?{done:!0}:{done:!1,value:A[C++]}},e:function(A){throw A},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var B,c=!0,o=!1;return{s:function(){g=g.call(A)},n:function(){var A=g.next();return c=A.done,A},e:function(A){o=!0,B=A},f:function(){try{c||null==g.return||g.return()}finally{if(o)throw B}}}}function $(A,I){(null==I||I>A.length)&&(I=A.length);for(var g=0,C=new Array(I);g<I;g++)C[g]=A[g];return C}function AA(A){var I=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(A){return!1}}();return function(){var g,C=a(A);if(I){var i=a(this).constructor;g=Reflect.construct(C,arguments,i)}else g=C.apply(this,arguments);return m(this,g)}}var IA=function(A){!function(A,I){if("function"!=typeof I&&null!==I)throw new TypeError("Super expression must either be null or a function");A.prototype=Object.create(I&&I.prototype,{constructor:{value:A,writable:!0,configurable:!0}}),Object.defineProperty(A,"prototype",{writable:!1}),I&&G(A,I)}(g,A);var I=AA(g);function g(A,C){var i;return b(this,g),(i=I.call(this,C)).name=A,i}return d(g)}(u(Error)),gA=function(){function A(){b(this,A),t(this,"_mutex",new V),t(this,"_audioContext",null),t(this,"_microphoneStream",null),t(this,"_recorderNode",null),t(this,"_resamplerWorker",null),t(this,"_engines",void 0),t(this,"_options",{}),t(this,"_state",void 0),this._engines=new Set,this._options={},this._state=P.STOPPED}var I,C,i,B,c,o;return d(A,[{key:"start",value:function(){var A=this;return new Promise((function(I,C){A._mutex.runExclusive(g(l.mark((function I(){var g,C,i,B,c;return l.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(I.prev=0,null!==A._audioContext&&A._state!==P.STOPPED&&!A.isReleased){I.next=15;break}return I.next=4,A.setupRecorder(A._options);case 4:g=I.sent,C=g.audioContext,i=g.microphoneStream,B=g.recorderNode,c=g.resamplerWorker,A._audioContext=C,A._microphoneStream=i,A._recorderNode=B,A._resamplerWorker=c,B.port.onmessage=function(A){c.process(A.data.buffer[0])},A._state=P.STARTED;case 15:if(null===A._audioContext||!A.isSuspended){I.next=18;break}return I.next=18,A._audioContext.resume();case 18:I.next=36;break;case 20:if(I.prev=20,I.t0=I.catch(0),!I.t0||!I.t0.name){I.next=35;break}if("SecurityError"!==I.t0.name&&"NotAllowedError"!==I.t0.name){I.next=27;break}throw new IA("PermissionError","Failed to record audio: microphone permissions denied.");case 27:if("NotFoundError"!==I.t0.name&&"OverconstrainedError"!==I.t0.name){I.next=31;break}throw new IA("DeviceMissingError","Failed to record audio: audio recording device was not found.");case 31:if("NotReadableError"!==I.t0.name){I.next=33;break}throw new IA("DeviceReadError","Failed to record audio: audio recording device is not working correctly.");case 33:I.next=36;break;case 35:throw I.t0;case 36:case"end":return I.stop()}}),I,null,[[0,20]])})))).then((function(){I()})).catch((function(A){C(A)}))}))}},{key:"stop",value:function(){var A=this;return new Promise((function(I,C){A._mutex.runExclusive(g(l.mark((function I(){var g,C,i;return l.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:null!==A._audioContext&&A._state!==P.STOPPED&&(null===(g=A._resamplerWorker)||void 0===g||g.terminate(),null===(C=A._recorderNode)||void 0===C||C.port.close(),null===(i=A._microphoneStream)||void 0===i||i.getAudioTracks().forEach((function(A){A.stop()})),A._state=P.STOPPED);case 1:case"end":return I.stop()}}),I)})))).then((function(){I()})).catch((function(A){C(A)}))}))}},{key:"isSuspended",get:function(){var A;return"suspended"===(null===(A=this._audioContext)||void 0===A?void 0:A.state)}},{key:"isReleased",get:function(){var A;return"closed"===(null===(A=this._audioContext)||void 0===A?void 0:A.state)}},{key:"recorderCallback",value:function(A){var I,g=_(this._engines);try{for(g.s();!(I=g.n()).done;){var C=I.value;C.worker&&C.worker.postMessage?C.worker.postMessage({command:"process",inputFrame:A}):C.postMessage?C.postMessage({command:"process",inputFrame:A}):C.onmessage&&C.onmessage({data:{command:"process",inputFrame:A}})}}catch(A){g.e(A)}finally{g.f()}}},{key:"getAudioContext",value:(o=g(l.mark((function A(){var I;return l.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:if(null!==this._audioContext&&!this.isReleased){A.next=5;break}return this._audioContext=new AudioContext,I=URL.createObjectURL(new Blob([M("LyoKICBDb3B5cmlnaHQgMjAyMiBQaWNvdm9pY2UgSW5jLgoKICBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIGxpY2Vuc2UuIEEgY29weSBvZiB0aGUgbGljZW5zZSBpcyBsb2NhdGVkIGluIHRoZSAiTElDRU5TRSIKICBmaWxlIGFjY29tcGFueWluZyB0aGlzIHNvdXJjZS4KCiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbgogIGFuICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZQogIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiovCgpjbGFzcyBSZWNvcmRlclByb2Nlc3NvciBleHRlbmRzIEF1ZGlvV29ya2xldFByb2Nlc3NvciB7CiAgY29uc3RydWN0b3Iob3B0aW9ucykgewogICAgc3VwZXIoKTsKCiAgICBjb25zdCB7IG51bWJlck9mQ2hhbm5lbHMgPSAxIH0gPSBvcHRpb25zPy5wcm9jZXNzb3JPcHRpb25zOwoKICAgIHRoaXMuX251bWJlck9mQ2hhbm5lbHMgPSBudW1iZXJPZkNoYW5uZWxzOwogIH0KCiAgcHJvY2VzcyhpbnB1dHMsIG91dHB1dHMsIHBhcmFtZXRlcnMpIHsKICAgIGxldCBpbnB1dCA9IGlucHV0c1swXTsgLy8gZ2V0IGZpcnN0IGlucHV0CiAgICBpZiAoaW5wdXQubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIHRoaXMucG9ydC5wb3N0TWVzc2FnZSh7CiAgICAgIGJ1ZmZlcjogaW5wdXQuc2xpY2UoMCwgdGhpcy5fbnVtYmVyT2ZDaGFubmVscykKICAgIH0pOwogICAgcmV0dXJuIHRydWU7CiAgfQp9CgpyZWdpc3RlclByb2Nlc3NvcigncmVjb3JkZXItcHJvY2Vzc29yJywgUmVjb3JkZXJQcm9jZXNzb3IpOwo=").buffer],{type:"application/javascript"})),A.next=5,this._audioContext.audioWorklet.addModule(I);case 5:return A.abrupt("return",this._audioContext);case 6:case"end":return A.stop()}}),A,this)}))),function(){return o.apply(this,arguments)})},{key:"setupRecorder",value:(c=g(l.mark((function A(I){var g,C,i,B,c,o,e,n,t,Z,d,b,G,m;return l.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:if(void 0!==navigator.mediaDevices){A.next=2;break}throw new IA("DeviceDisabledError","Audio recording is not allowed or disabled.");case 2:return g=I.outputSampleRate,C=void 0===g?16e3:g,i=I.frameLength,B=void 0===i?512:i,c=I.deviceId,o=void 0===c?null:c,e=I.filterOrder,n=void 0===e?50:e,t=1,A.next=6,this.getAudioContext();case 6:return Z=A.sent,A.next=9,navigator.mediaDevices.getUserMedia({audio:{deviceId:o?{exact:o}:void 0}});case 9:return d=A.sent,b=Z.createMediaStreamSource(d),A.next=13,O.create(b.context.sampleRate,C,n,B,this.recorderCallback.bind(this));case 13:return G=A.sent,m=new window.AudioWorkletNode(Z,"recorder-processor",{processorOptions:{frameLength:B,numberOfChannels:t}}),b.connect(m),m.connect(Z.destination),A.abrupt("return",{audioContext:Z,microphoneStream:d,recorderNode:m,resamplerWorker:G});case 18:case"end":return A.stop()}}),A,this)}))),function(A){return c.apply(this,arguments)})}],[{key:"instance",value:function(){return this._instance||(this._instance=new A),this._instance}},{key:"audioDump",value:(B=g(l.mark((function A(){var I,g,C=this,i=arguments;return l.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return I=i.length>0&&void 0!==i[0]?i[0]:3e3,g=new q,A.next=4,this.subscribe(g);case 4:return A.abrupt("return",new Promise((function(A){C.audioDumpEngine=g,setTimeout((function(){C.unsubscribe(g),A(g.onend())}),I)})));case 5:case"end":return A.stop()}}),A,this)}))),function(){return B.apply(this,arguments)})},{key:"subscribe",value:(i=g(l.mark((function A(I){var g,C,i;return l.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:g=_(Array.isArray(I)?I:[I]),A.prev=1,g.s();case 3:if((C=g.n()).done){A.next=26;break}if(i=C.value){A.next=7;break}throw new IA("InvalidEngine","Null or undefined engine.");case 7:if(!i.worker){A.next=15;break}if(!i.worker.postMessage||"function"!=typeof i.worker.postMessage){A.next=12;break}this.instance()._engines.add(i),A.next=13;break;case 12:throw new IA("InvalidEngine","Engine must have a 'onmessage' handler.");case 13:A.next=24;break;case 15:if(!i.postMessage||"function"!=typeof i.postMessage){A.next=19;break}this.instance()._engines.add(i),A.next=24;break;case 19:if(!i.onmessage||"function"!=typeof i.onmessage){A.next=23;break}this.instance()._engines.add(i),A.next=24;break;case 23:throw new IA("InvalidEngine","Engine must have a 'onmessage' handler.");case 24:A.next=3;break;case 26:A.next=31;break;case 28:A.prev=28,A.t0=A.catch(1),g.e(A.t0);case 31:return A.prev=31,g.f(),A.finish(31);case 34:if(!(this.instance()._engines.size>0&&this.instance()._state!==P.STARTED)){A.next=37;break}return A.next=37,this.instance().start();case 37:case"end":return A.stop()}}),A,this,[[1,28,31,34]])}))),function(A){return i.apply(this,arguments)})},{key:"unsubscribe",value:(C=g(l.mark((function A(I){var g,C,i;return l.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:g=_(Array.isArray(I)?I:[I]);try{for(g.s();!(C=g.n()).done;)i=C.value,this.instance()._engines.delete(i)}catch(A){g.e(A)}finally{g.f()}if(0!==this.instance()._engines.size||this.instance()._state===P.STOPPED){A.next=5;break}return A.next=5,this.instance().stop();case 5:case"end":return A.stop()}}),A,this)}))),function(A){return C.apply(this,arguments)})},{key:"reset",value:(I=g(l.mark((function A(){return l.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return this.instance()._engines.clear(),A.next=3,this.instance().stop();case 3:case"end":return A.stop()}}),A,this)}))),function(){return I.apply(this,arguments)})},{key:"setOptions",value:function(A){var I=this,C=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.instance()._options=A,C&&this.instance().stop().then(g(l.mark((function A(){return l.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return A.next=2,I.instance().start();case 2:case"end":return A.stop()}}),A)}))))}},{key:"audioContext",get:function(){return this.instance()._audioContext}},{key:"isRecording",get:function(){return this.instance()._state===P.STARTED}}]),A}();t(gA,"_instance",void 0);var CA=j("Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwooZnVuY3Rpb24gKCkgewogICd1c2Ugc3RyaWN0JzsKCiAgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsKICAgIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOwogICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldOwogICAgcmV0dXJuIGFycjI7CiAgfQoKICBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7CiAgICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsKICB9CgogIGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbIkBAaXRlcmF0b3IiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKICB9CgogIGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsKICAgIGlmICghbykgcmV0dXJuOwogICAgaWYgKHR5cGVvZiBvID09PSAic3RyaW5nIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7CiAgICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7CiAgICBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsKICAgIGlmIChuID09PSAiTWFwIiB8fCBuID09PSAiU2V0IikgcmV0dXJuIEFycmF5LmZyb20obyk7CiAgICBpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOwogIH0KCiAgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7CiAgfQoKICBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7CiAgICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOwogIH0KCiAgLyoNCiAgICBDb3B5cmlnaHQgMjAyMiBQaWNvdm9pY2UgSW5jLg0KCiAgICBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIGxpY2Vuc2UuIEEgY29weSBvZiB0aGUgbGljZW5zZSBpcyBsb2NhdGVkIGluIHRoZSAiTElDRU5TRSINCiAgICBmaWxlIGFjY29tcGFueWluZyB0aGlzIHNvdXJjZS4NCgogICAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbg0KICAgIGFuICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZQ0KICAgIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogICovCiAgdmFyIElOVF8xNl9NQVggPSAzMjc2NzsKICB2YXIgRVBTSUxPTiA9IDFlLTk7CiAgdmFyIHByb2Nlc3MgPSBmdW5jdGlvbiBwcm9jZXNzKGZyYW1lcykgewogICAgdmFyIHN1bSA9IF90b0NvbnN1bWFibGVBcnJheShmcmFtZXMpLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0b3IsIGZyYW1lKSB7CiAgICAgIHJldHVybiBhY2N1bXVsYXRvciArIE1hdGgucG93KGZyYW1lLCAyKTsKICAgIH0sIDApOwogICAgdmFyIHJtcyA9IHN1bSAvIGZyYW1lcy5sZW5ndGggLyBJTlRfMTZfTUFYIC8gSU5UXzE2X01BWDsKICAgIHJldHVybiAxMCAqIE1hdGgubG9nMTAoTWF0aC5tYXgocm1zLCBFUFNJTE9OKSk7CiAgfTsKICBvbm1lc3NhZ2UgPSBmdW5jdGlvbiBvbm1lc3NhZ2UoZSkgewogICAgc3dpdGNoIChlLmRhdGEuY29tbWFuZCkgewogICAgICBjYXNlICdwcm9jZXNzJzoKICAgICAgICBwb3N0TWVzc2FnZShwcm9jZXNzKGUuZGF0YS5pbnB1dEZyYW1lKSk7CiAgICAgICAgYnJlYWs7CiAgICB9CiAgfTsKCn0pKCk7Cgo=",null,!1),iA=function(){function A(I){var g=this;b(this,A),t(this,"_vuMeterCallback",void 0),t(this,"_worker",void 0),this._vuMeterCallback=I,this._worker=new CA,this._worker.onmessage=function(A){g._vuMeterCallback(A.data)}}return d(A,[{key:"worker",get:function(){return this._worker}}]),A}(),BA="cA={args_get:function(A){return 0},args_sizes_get:function(A){return 0},environ_get:function(A){return 0},environ_sizes_get:function(A){return 0},clock_res_get:function(A){return 0},clock_time_get:function(A){return 0},fd_advise:function(A){return 0},fd_allocate:function(A){return 0},fd_close:function(A){return 0},fd_datasync:function(A){return 0},fd_fdstat_get:function(A){return 0},fd_fdstat_set_flags:function(A){return 0},fd_fdstat_set_rights:function(A){return 0},fd_filestat_get:function(A){return 0},fd_filestat_set_size:function(A){return 0},fd_filestat_set_times:function(A){return 0},fd_pread:function(A){return 0},fd_prestat_get:function(A){return 0},fd_prestat_dir_name:function(A){return 0},fd_pwrite:function(A){return 0},fd_read:function(A){return 0},fd_readdir:function(A){return 0},fd_renumber:function(A){return 0},fd_seek:function(A){return 0},fd_sync:function(A){return 0},fd_tell:function(A){return 0},fd_write:function(A){return 0},path_create_directory:function(A){return 0},path_filestat_get:function(A){return 0},path_filestat_set_times:function(A){return 0},path_link:function(A){return 0},path_open:function(A){return 0},path_readlink:function(A){return 0},path_remove_directory:function(A){return 0},path_rename:function(A){return 0},path_symlink:function(A){return 0},path_unlink_file:function(A){return 0},poll_oneoff:function(A){return 0},proc_exit:function(A){return 0},proc_raise:function(A){return 0},sched_yield:function(A){return 0},random_get:function(A){return 0},sock_recv:function(A){return 0},sock_send:function(A){return 0},sock_shutdown:function(A){return 0}},oA=function(){function A(I){b(this,A),t(this,"_pvResamplerConvertNumSamplesToInputSampleRate",void 0),t(this,"_pvResamplerConvertNumSamplesToOutputSampleRate",void 0),t(this,"_pvResamplerDelete",void 0),t(this,"_pvResamplerProcess",void 0),t(this,"_pvResamplerReset",void 0),t(this,"_cAlignedAlloc",void 0),t(this,"_inputBufferAddress",void 0),t(this,"_objectAddress",void 0),t(this,"_outputBufferAddress",void 0),t(this,"_wasmMemory",void 0),t(this,"_memoryBuffer",void 0),t(this,"_memoryBufferView",void 0),t(this,"_frameLength",void 0),t(this,"_inputBufferLength",void 0),A._version=I.version,this._pvResamplerConvertNumSamplesToInputSampleRate=I.pvResamplerConvertNumSamplesToInputSampleRate,this._pvResamplerConvertNumSamplesToOutputSampleRate=I.pvResamplerConvertNumSamplesToOutputSampleRate,this._pvResamplerReset=I.pvResamplerReset,this._pvResamplerProcess=I.pvResamplerProcess,this._pvResamplerDelete=I.pvResamplerDelete,this._cAlignedAlloc=I.cAlignedAlloc,this._wasmMemory=I.memory,this._inputBufferAddress=I.inputBufferAddress,this._objectAddress=I.objectAddress,this._outputBufferAddress=I.outputBufferAddress,this._memoryBuffer=new Int16Array(I.memory.buffer),this._memoryBufferView=new DataView(I.memory.buffer),this._frameLength=I.frameLength,this._inputBufferLength=I.inputFrameLength}var I,C;return d(A,[{key:"process",value:function(A,I){if(A.length>this._inputBufferLength)throw new Error("InputFrame length '".concat(A.length,"' must be smaller than ").concat(this._inputBufferLength,"."));var g=new Int16Array(A.length);if(A.constructor===Float32Array)for(var C=0;C<A.length;C++)A[C]<0?g[C]=32768*A[C]:g[C]=32767*A[C];else{if(A.constructor!==Int16Array)throw new Error("Invalid inputFrame type: ".concat(e(A),". Expected Float32Array or Int16Array."));g=A}this._memoryBuffer.set(g,this._inputBufferAddress/Int16Array.BYTES_PER_ELEMENT);for(var i=this._pvResamplerProcess(this._objectAddress,this._inputBufferAddress,A.length,this._outputBufferAddress),B=0;B<i;B++)I[B]=this._memoryBufferView.getInt16(this._outputBufferAddress+B*Int16Array.BYTES_PER_ELEMENT,!0);return i}},{key:"reset",value:function(){this._pvResamplerReset(this._objectAddress)}},{key:"release",value:function(){this._pvResamplerDelete(this._objectAddress)}},{key:"inputBufferLength",get:function(){return this._inputBufferLength}},{key:"frameLength",get:function(){return this._frameLength}},{key:"version",get:function(){return A._version}},{key:"getNumRequiredInputSamples",value:function(A){return this._pvResamplerConvertNumSamplesToInputSampleRate(this._objectAddress,A)}},{key:"getNumRequiredOutputSamples",value:function(A){return this._pvResamplerConvertNumSamplesToOutputSampleRate(this._objectAddress,A)}}],[{key:"setWasm",value:function(A){void 0===this._wasm&&(this._wasm=A)}},{key:"create",value:(C=g(l.mark((function I(g,C,i,B){var c;return l.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,A.initWasm(g,C,i,B);case 2:return c=I.sent,I.abrupt("return",new A(c));case 4:case"end":return I.stop()}}),I)}))),function(A,I,g,i){return C.apply(this,arguments)})},{key:"initWasm",value:(I=g(l.mark((function A(I,g,C,i){var B,c,o,e,n,t,Z,d,b,G,m,a,s,Q,u,r,y,h,X,V,R,W,w;return l.wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return B=new WebAssembly.Memory({initial:64}),c=new Uint8Array(B.buffer),o={wasi_snapshot_preview1:cA,env:{memory:B,pv_console_log_wasm:function(A){console.log(x(c,A))},pv_assert_wasm:function(A,I,g){if(0===A){var C=x(c,g);throw new Error("assertion failed at line ".concat(I,' in "').concat(C,'"'))}}}},e=M(this._wasm),A.next=8,WebAssembly.instantiate(e,o);case 8:if(n=A.sent,t=n.instance,Z=t.exports.aligned_alloc,d=t.exports.pv_resampler_init,b=t.exports.pv_resampler_convert_num_samples_to_input_sample_rate,G=t.exports.pv_resampler_convert_num_samples_to_output_sample_rate,m=t.exports.pv_resampler_version,0!==(a=Z(Int32Array.BYTES_PER_ELEMENT,Int32Array.BYTES_PER_ELEMENT))){A.next=18;break}throw new Error("malloc failed: Cannot allocate memory");case 18:if(s=d(I,g,C,a),Q=m(),u=x(c,Q),1e4===s){A.next=23;break}throw new Error("pv_resampler_init failed with status ".concat(s));case 23:if(r=new DataView(B.buffer),y=r.getInt32(a,!0),h=b(y,i)+1,0!==(X=Z(Int16Array.BYTES_PER_ELEMENT,h*Int16Array.BYTES_PER_ELEMENT))){A.next=29;break}throw new Error("malloc failed: Cannot allocate memory");case 29:if(0!==(V=Z(Int16Array.BYTES_PER_ELEMENT,i*Int16Array.BYTES_PER_ELEMENT))){A.next=32;break}throw new Error("malloc failed: Cannot allocate memory");case 32:return R=t.exports.pv_resampler_reset,W=t.exports.pv_resampler_process,w=t.exports.pv_resampler_delete,A.abrupt("return",{cAlignedAlloc:Z,frameLength:i,inputBufferAddress:X,inputFrameLength:h,memory:B,objectAddress:y,outputBufferAddress:V,pvResamplerConvertNumSamplesToInputSampleRate:b,pvResamplerConvertNumSamplesToOutputSampleRate:G,pvResamplerDelete:w,pvResamplerInit:d,pvResamplerProcess:W,pvResamplerReset:R,version:u});case 36:case"end":return A.stop()}}),A,this)}))),function(A,g,C,i){return I.apply(this,arguments)})}]),A}();return t(oA,"_wasm",void 0),t(oA,"_version",void 0),oA.setWasm(BA),O.setWasm(BA),A.ResamplerWorker=O,A.VuMeterEngine=iA,A.WebVoiceProcessor=gA,A.WvpError=IA,A.browserCompatibilityCheck=function(){var A=window.isSecureContext,I=void 0!==navigator.mediaDevices,g=void 0!==navigator.webkitGetUserMedia,C=void 0!==window.Worker,i="object"===("undefined"==typeof WebAssembly?"undefined":e(WebAssembly));return{_picovoice:I&&i&&C,AudioWorklet:"function"==typeof AudioWorklet,isSecureContext:A,mediaDevices:I,WebAssembly:i,webKitGetUserMedia:g,Worker:C}},Object.defineProperty(A,"__esModule",{value:!0}),A}({});
