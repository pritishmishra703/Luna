var PorcupineWeb = (function (exports) {
  'use strict';

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
    if (null != _i) {
      var _s,
        _e,
        _x,
        _r,
        _arr = [],
        _n = !0,
        _d = !1;
      try {
        if (_x = (_i = _i.call(arr)).next, 0 === i) {
          if (Object(_i) !== _i) return;
          _n = !1;
        } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
      } catch (err) {
        _d = !0, _e = err;
      } finally {
        try {
          if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
  }

  function _arrayLikeToArray$3(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }

  function _unsupportedIterableToArray$3(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$3(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$3(arr, i) || _nonIterableRest();
  }

  function asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator$1(fn) {
    return function () {
      var self = this,
        args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(undefined);
      });
    };
  }

  function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _typeof$1(obj) {
    "@babel/helpers - typeof";

    return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof$1(obj);
  }

  function _toPrimitive(input, hint) {
    if (_typeof$1(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (_typeof$1(res) !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof$1(key) === "symbol" ? key : String(key);
  }

  function _defineProperties$1(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass$1(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties$1(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  function _defineProperty$1(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  function createCommonjsModule$1(fn) {
    var module = { exports: {} };
  	return fn(module, module.exports), module.exports;
  }

  var _typeof_1$1 = createCommonjsModule$1(function (module) {
  function _typeof(obj) {
    "@babel/helpers - typeof";

    return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
  }
  module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  });

  var regeneratorRuntime$2 = createCommonjsModule$1(function (module) {
  var _typeof = _typeof_1$1["default"];
  function _regeneratorRuntime() {
    module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
      return exports;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      defineProperty = Object.defineProperty || function (obj, key, desc) {
        obj[key] = desc.value;
      },
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
      return Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), obj[key];
    }
    try {
      define({}, "");
    } catch (err) {
      define = function define(obj, key, value) {
        return obj[key] = value;
      };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
      return defineProperty(generator, "_invoke", {
        value: makeInvokeMethod(innerFn, self, context)
      }), generator;
    }
    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }
    exports.wrap = wrap;
    var ContinueSentinel = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if ("throw" !== record.type) {
          var result = record.arg,
            value = result.value;
          return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          }) : PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped, resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
        reject(record.arg);
      }
      var previousPromise;
      defineProperty(this, "_invoke", {
        value: function value(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");
        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }
        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }
          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);
          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }
          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }
    function maybeInvokeDelegate(delegate, context) {
      var methodName = context.method,
        method = delegate.iterator[methodName];
      if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
      var record = tryCatch(method, delegate.iterator, context.arg);
      if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
      var info = record.arg;
      return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }
    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal", delete record.arg, entry.completion = record;
    }
    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) return iteratorMethod.call(iterable);
        if ("function" == typeof iterable.next) return iterable;
        if (!isNaN(iterable.length)) {
          var i = -1,
            next = function next() {
              for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              return next.value = undefined, next.done = !0, next;
            };
          return next.next = next;
        }
      }
      return {
        next: doneResult
      };
    }
    function doneResult() {
      return {
        value: undefined,
        done: !0
      };
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: !0
    }), defineProperty(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: !0
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
      var ctor = "function" == typeof genFun && genFun.constructor;
      return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function (genFun) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function (arg) {
      return {
        __await: arg
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      void 0 === PromiseImpl && (PromiseImpl = Promise);
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
      return this;
    }), define(Gp, "toString", function () {
      return "[object Generator]";
    }), exports.keys = function (val) {
      var object = Object(val),
        keys = [];
      for (var key in object) keys.push(key);
      return keys.reverse(), function next() {
        for (; keys.length;) {
          var key = keys.pop();
          if (key in object) return next.value = key, next.done = !1, next;
        }
        return next.done = !0, next;
      };
    }, exports.values = values, Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      },
      stop: function stop() {
        this.done = !0;
        var rootRecord = this.tryEntries[0].completion;
        if ("throw" === rootRecord.type) throw rootRecord.arg;
        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) throw exception;
        var context = this;
        function handle(loc, caught) {
          return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i],
            record = entry.completion;
          if ("root" === entry.tryLoc) return handle("end");
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            } else {
              if (!hasFinally) throw new Error("try statement without catch or finally");
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
        var record = finallyEntry ? finallyEntry.completion : {};
        return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if ("throw" === record.type) throw record.arg;
        return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if ("throw" === record.type) {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        return this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
      }
    }, exports;
  }
  module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
  });

  // TODO(Babel 8): Remove this file.

  var runtime = regeneratorRuntime$2();
  var regenerator$1 = runtime;

  // Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }

  const E_CANCELED = new Error('request for lock canceled');

  var __awaiter$2 = function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  class Semaphore {
      constructor(_maxConcurrency, _cancelError = E_CANCELED) {
          this._maxConcurrency = _maxConcurrency;
          this._cancelError = _cancelError;
          this._queue = [];
          this._waiters = [];
          if (_maxConcurrency <= 0) {
              throw new Error('semaphore must be initialized to a positive value');
          }
          this._value = _maxConcurrency;
      }
      acquire() {
          const locked = this.isLocked();
          const ticketPromise = new Promise((resolve, reject) => this._queue.push({ resolve, reject }));
          if (!locked)
              this._dispatch();
          return ticketPromise;
      }
      runExclusive(callback) {
          return __awaiter$2(this, void 0, void 0, function* () {
              const [value, release] = yield this.acquire();
              try {
                  return yield callback(value);
              }
              finally {
                  release();
              }
          });
      }
      waitForUnlock() {
          return __awaiter$2(this, void 0, void 0, function* () {
              if (!this.isLocked()) {
                  return Promise.resolve();
              }
              const waitPromise = new Promise((resolve) => this._waiters.push({ resolve }));
              return waitPromise;
          });
      }
      isLocked() {
          return this._value <= 0;
      }
      /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */
      release() {
          if (this._maxConcurrency > 1) {
              throw new Error('this method is unavailable on semaphores with concurrency > 1; use the scoped release returned by acquire instead');
          }
          if (this._currentReleaser) {
              const releaser = this._currentReleaser;
              this._currentReleaser = undefined;
              releaser();
          }
      }
      cancel() {
          this._queue.forEach((ticket) => ticket.reject(this._cancelError));
          this._queue = [];
      }
      _dispatch() {
          const nextTicket = this._queue.shift();
          if (!nextTicket)
              return;
          let released = false;
          this._currentReleaser = () => {
              if (released)
                  return;
              released = true;
              this._value++;
              this._resolveWaiters();
              this._dispatch();
          };
          nextTicket.resolve([this._value--, this._currentReleaser]);
      }
      _resolveWaiters() {
          this._waiters.forEach((waiter) => waiter.resolve());
          this._waiters = [];
      }
  }

  var __awaiter$1 = function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  class Mutex {
      constructor(cancelError) {
          this._semaphore = new Semaphore(1, cancelError);
      }
      acquire() {
          return __awaiter$1(this, void 0, void 0, function* () {
              const [, releaser] = yield this._semaphore.acquire();
              return releaser;
          });
      }
      runExclusive(callback) {
          return this._semaphore.runExclusive(() => callback());
      }
      isLocked() {
          return this._semaphore.isLocked();
      }
      waitForUnlock() {
          return this._semaphore.waitForUnlock();
      }
      /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */
      release() {
          this._semaphore.release();
      }
      cancel() {
          return this._semaphore.cancel();
      }
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function createCommonjsModule(fn) {
    var module = { exports: {} };
  	return fn(module, module.exports), module.exports;
  }

  var _typeof_1 = createCommonjsModule(function (module) {
  function _typeof(obj) {
    "@babel/helpers - typeof";

    return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
  }

  module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  });

  var regeneratorRuntime$1 = createCommonjsModule(function (module) {
  var _typeof = _typeof_1["default"];

  function _regeneratorRuntime() {
    /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

    module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
      return exports;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    var exports = {},
        Op = Object.prototype,
        hasOwn = Op.hasOwnProperty,
        $Symbol = "function" == typeof Symbol ? Symbol : {},
        iteratorSymbol = $Symbol.iterator || "@@iterator",
        asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
        toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      return Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), obj[key];
    }

    try {
      define({}, "");
    } catch (err) {
      define = function define(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
          generator = Object.create(protoGenerator.prototype),
          context = new Context(tryLocsList || []);
      return generator._invoke = function (innerFn, self, context) {
        var state = "suspendedStart";
        return function (method, arg) {
          if ("executing" === state) throw new Error("Generator is already running");

          if ("completed" === state) {
            if ("throw" === method) throw arg;
            return doneResult();
          }

          for (context.method = method, context.arg = arg;;) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
              if ("suspendedStart" === state) throw state = "completed", context.arg;
              context.dispatchException(context.arg);
            } else "return" === context.method && context.abrupt("return", context.arg);
            state = "executing";
            var record = tryCatch(innerFn, self, context);

            if ("normal" === record.type) {
              if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
              return {
                value: record.arg,
                done: context.done
              };
            }

            "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
          }
        };
      }(innerFn, self, context), generator;
    }

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    exports.wrap = wrap;
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf,
        NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if ("throw" !== record.type) {
          var result = record.arg,
              value = result.value;
          return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          }) : PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped, resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }

        reject(record.arg);
      }

      var previousPromise;

      this._invoke = function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (undefined === method) {
        if (context.delegate = null, "throw" === context.method) {
          if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
          context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);
      if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
      var info = record.arg;
      return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal", delete record.arg, entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) return iteratorMethod.call(iterable);
        if ("function" == typeof iterable.next) return iterable;

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            for (; ++i < iterable.length;) {
              if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            }

            return next.value = undefined, next.done = !0, next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    function doneResult() {
      return {
        value: undefined,
        done: !0
      };
    }

    return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
      var ctor = "function" == typeof genFun && genFun.constructor;
      return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function (genFun) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function (arg) {
      return {
        __await: arg
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      void 0 === PromiseImpl && (PromiseImpl = Promise);
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
      return this;
    }), define(Gp, "toString", function () {
      return "[object Generator]";
    }), exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      return keys.reverse(), function next() {
        for (; keys.length;) {
          var key = keys.pop();
          if (key in object) return next.value = key, next.done = !1, next;
        }

        return next.done = !0, next;
      };
    }, exports.values = values, Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
          "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
        }
      },
      stop: function stop() {
        this.done = !0;
        var rootRecord = this.tryEntries[0].completion;
        if ("throw" === rootRecord.type) throw rootRecord.arg;
        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) throw exception;
        var context = this;

        function handle(loc, caught) {
          return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i],
              record = entry.completion;
          if ("root" === entry.tryLoc) return handle("end");

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc"),
                hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            } else {
              if (!hasFinally) throw new Error("try statement without catch or finally");
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
        var record = finallyEntry ? finallyEntry.completion : {};
        return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if ("throw" === record.type) throw record.arg;
        return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if ("throw" === record.type) {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        return this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
      }
    }, exports;
  }

  module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
  });

  var regenerator = regeneratorRuntime$1();

  const t=new WeakMap;function e(t,e){return new Proxy(t,{get:(t,r)=>e(t[r])})}class r{constructor(){this.value=void 0,this.exports=null;}getState(){return this.exports.asyncify_get_state()}assertNoneState(){let t=this.getState();if(0!==t)throw new Error(`Invalid async state ${t}, expected 0.`)}wrapImportFn(t){return (...e)=>{if(2===this.getState())return this.exports.asyncify_stop_rewind(),this.value;this.assertNoneState();let r=t(...e);if(!(s=r)||"object"!=typeof s&&"function"!=typeof s||"function"!=typeof s.then)return r;var s;this.exports.asyncify_start_unwind(16),this.value=r;}}wrapModuleImports(t){return e(t,t=>"function"==typeof t?this.wrapImportFn(t):t)}wrapImports(t){if(void 0!==t)return e(t,(t=Object.create(null))=>this.wrapModuleImports(t))}wrapExportFn(e){let r=t.get(e);return void 0!==r||(r=async(...t)=>{this.assertNoneState();let r=e(...t);for(;1===this.getState();)this.exports.asyncify_stop_unwind(),this.value=await this.value,this.assertNoneState(),this.exports.asyncify_start_rewind(16),r=e();return this.assertNoneState(),r},t.set(e,r)),r}wrapExports(e){let r=Object.create(null);for(let t in e){let s=e[t];"function"!=typeof s||t.startsWith("asyncify_")||(s=this.wrapExportFn(s)),Object.defineProperty(r,t,{enumerable:!0,value:s});}return t.set(e,r),r}init(t,e){const{exports:r}=t,n=r.memory||e.env&&e.env.memory;new Int32Array(n.buffer,16).set([24,1024]),this.exports=this.wrapExports(r),Object.setPrototypeOf(t,s.prototype);}}class s extends WebAssembly.Instance{constructor(t,e){let s=new r;super(t,s.wrapImports(e)),s.init(this,e);}get exports(){return t.get(super.exports)}}async function n(t,e){let s=new r,n=await WebAssembly.instantiate(t,s.wrapImports(e));return s.init(n instanceof WebAssembly.Instance?n:n.instance,e),n}async function a(t,e){let s=new r,n=await WebAssembly.instantiateStreaming(t,s.wrapImports(e));return s.init(n.instance,e),n}Object.defineProperty(s.prototype,"exports",{enumerable:!0});

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return _assertThisInitialized(self);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function ownKeys$1$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  /*
    Copyright 2022 Picovoice Inc.

    You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
    file accompanying this source.

    Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
    an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
    specific language governing permissions and limitations under the License.
  */
  /**
   * BasePvFile Class
   * This class mocks the file system using in-memory storage.
   */
  var PvFile = /*#__PURE__*/function () {
    function PvFile() {
      _classCallCheck(this, PvFile);
      _defineProperty(this, "_path", void 0);
      _defineProperty(this, "_meta", void 0);
    }
    _createClass(PvFile, [{
      key: "meta",
      get:
      /**
       * Getter for file's meta information.
       */
      function get() {
        if (this._meta === undefined) {
          return undefined;
        }
        return _objectSpread$1$1({
          version: 0
        }, this._meta);
      }
      /**
       * Get the file pointer from the _filePtrs map.
       * @param ptr The pointer to BasePvFile instance to get from the map.
       * @returns BasePvFile returns the current file instance related to ptr.
       */
    }], [{
      key: "getPtr",
      value: function getPtr(ptr) {
        return PvFile._filePtrs.get(ptr);
      }
      /**
       * Saves the BasePvFile instance to the map with an associated ptr.
       * @param ptr The file pointer to save as the key.
       * @param instance The BasePvFile instance to save as the value.
       */
    }, {
      key: "setPtr",
      value: function setPtr(ptr, instance) {
        PvFile._filePtrs.set(ptr, instance);
      }
      /**
       * Removes the ptr from the _filePtrs map.
       * @param ptr The file pointer to remove.
       */
    }, {
      key: "removePtr",
      value: function removePtr(ptr) {
        PvFile._filePtrs["delete"](ptr);
      }
    }]);
    return PvFile;
  }();
  _defineProperty(PvFile, "_filePtrs", new Map());

  function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  /**
   * Indexed DB configurations
   */
  var DB_NAME = 'pv_db';
  var PV_FILE_STORE = 'pv_file';
  var DB_VERSION = 3;
  /**
   * Helper to get IndexedDB.
   */
  function getDB() {
    return new Promise(function (resolve, reject) {
      var request = self.indexedDB.open(DB_NAME, DB_VERSION);
      request.onerror = function () {
        reject(request.error);
      };
      request.onsuccess = function () {
        resolve(request.result);
      };
      request.onupgradeneeded = function () {
        if (!request.result.objectStoreNames.contains(PV_FILE_STORE)) {
          request.result.createObjectStore(PV_FILE_STORE);
        }
      };
    });
  }
  /**
   * PvFile Class
   * This class mocks the file system using IndexedDB.
   * IndexedDB is REQUIRED.
   */
  var PvFileIDB = /*#__PURE__*/function (_PvFile) {
    _inherits(PvFileIDB, _PvFile);
    var _super = _createSuper$1(PvFileIDB);
    /**
     * Constructor of PvFile instance.
     * @param path The path of a file.
     * @param meta The metadata of the file.
     * @param db The db instance currently related to the opened file.
     * @param mode The mode - either readonly or readwrite.
     */
    function PvFileIDB(path, meta, db, mode) {
      var _this;
      _classCallCheck(this, PvFileIDB);
      _this = _super.call(this);
      _defineProperty(_assertThisInitialized(_this), "_pageSize", 65536);
      _defineProperty(_assertThisInitialized(_this), "_db", void 0);
      _defineProperty(_assertThisInitialized(_this), "_mode", void 0);
      _defineProperty(_assertThisInitialized(_this), "_pagePtr", 0);
      _defineProperty(_assertThisInitialized(_this), "_pageOffset", 0);
      _this._path = path;
      _this._meta = meta;
      _this._db = db;
      _this._mode = mode;
      return _this;
    }
    /**
     * Opens a file and return an instance of PvFile. A file can be opened in readonly or readwrite mode
     * which follows IndexedDB standard of reading and writing values to the db.
     * The file is stored as an Uint8Array separated by pages.
     * NOTE: The key exactly matching the path expects a value of type PvFileMeta.
     * @param path The path of the file to open stored in IndexedDB.
     * @param mode A string, if it contains 'r' in the string, it will open the file in readonly mode, else it
     * will open in readwrite mode.
     * @returns Promise<PvFile> An instance of PvFile.
     * @throws Error if IndexedDB is not supported.
     */
    _createClass(PvFileIDB, [{
      key: "close",
      value:
      /**
       * Closes the db connection. Any other instance function call will not work once
       * the db is closed.
       */
      function () {
        var _close = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this._db.close();
                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));
        function close() {
          return _close.apply(this, arguments);
        }
        return close;
      }()
      /**
       * Reads a total of 'count' elements, each with a size of 'size' bytes from the current position in the stream.
       * Moves the stream by the amount of elements read.
       * If the last few bytes is smaller than 'size' it will not read (similar to fread) the bytes.
       * @param size The element size.
       * @param count The number of elements to read.
       * @returns Promise<Uint8Array> A Uint8Array with the elements copied to it.
       * @throws Error if file doesn't exist or if EOF.
       */
    }, {
      key: "read",
      value: function () {
        var _read = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(size, count) {
          var _this2 = this;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", new Promise(function (resolve, reject) {
                    if (!_this2.exists()) {
                      reject(new Error("'".concat(_this2._path, "' doesn't exist.")));
                      return;
                    }
                    if (_this2._isEOF) {
                      var err = new Error("EOF");
                      err.name = "EndOfFile";
                      reject(err);
                      return;
                    }
                    var copied = 0;
                    var maxToCopy = Math.min(size * count, _this2._meta.size);
                    var totalElems = maxToCopy - maxToCopy % size;
                    var buffer = new Uint8Array(totalElems);
                    var keyRange = IDBKeyRange.bound("".concat(_this2._path, "-").concat(PvFileIDB.createPage(_this2._pagePtr)), "".concat(_this2._path, "-").concat(PvFileIDB.createPage(_this2._meta.numPages)));
                    var store = _this2._store;
                    var req = store.openCursor(keyRange);
                    req.onsuccess = function () {
                      var cursor = req.result;
                      if (!cursor || _this2._isEOF) {
                        return;
                      }
                      var toCopy = Math.min(totalElems - copied, cursor.value.length - _this2._pageOffset);
                      buffer.set(cursor.value.slice(_this2._pageOffset, _this2._pageOffset + toCopy), copied);
                      copied += toCopy;
                      _this2._pageOffset += toCopy;
                      if (_this2._pageOffset === _this2._pageSize) {
                        _this2._pagePtr += 1;
                        _this2._pageOffset = 0;
                      }
                      if (copied < totalElems) {
                        cursor["continue"]();
                      }
                    };
                    store.transaction.onerror = function () {
                      reject(store.transaction.error);
                    };
                    store.transaction.oncomplete = function () {
                      resolve(buffer.slice(0, copied));
                    };
                  }));
                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));
        function read(_x, _x2) {
          return _read.apply(this, arguments);
        }
        return read;
      }()
      /**
       * Writes an Uint8Array to IndexedDB seperated by pages.
       * @param content The bytes to save.
       * @param version Version of the file.
       */
    }, {
      key: "write",
      value: function () {
        var _write = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(content) {
          var _this3 = this;
          var version,
            _args4 = arguments;
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  version = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : 1;
                  return _context4.abrupt("return", new Promise( /*#__PURE__*/function () {
                    var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(resolve, reject) {
                      var store, getCurrentPage, last, newContent, newSize, newMeta, pages, i, keyRange;
                      return regenerator.wrap(function _callee3$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              if (!(_this3._mode === "readonly")) {
                                _context3.next = 3;
                                break;
                              }
                              reject(new Error("Instance is readonly mode only."));
                              return _context3.abrupt("return");
                            case 3:
                              if (!(typeof version !== "number" && version <= 0)) {
                                _context3.next = 6;
                                break;
                              }
                              reject(new Error("Version should be a positive number"));
                              return _context3.abrupt("return");
                            case 6:
                              store = _this3._store;
                              getCurrentPage = function getCurrentPage() {
                                return new Promise(function (res) {
                                  var req = store.get("".concat(_this3._path, "-").concat(PvFileIDB.createPage(_this3._pagePtr)));
                                  req.onsuccess = function () {
                                    if (req.result !== undefined) {
                                      res(req.result.slice(0, _this3._pageOffset));
                                    } else {
                                      res(new Uint8Array(0));
                                    }
                                  };
                                });
                              };
                              _context3.next = 10;
                              return getCurrentPage();
                            case 10:
                              last = _context3.sent;
                              newContent = new Uint8Array(last.length + content.length);
                              newContent.set(last);
                              newContent.set(content, last.length);
                              newSize = _this3._pagePtr * _this3._pageSize + newContent.length;
                              newMeta = {
                                size: newSize,
                                numPages: Math.ceil(newSize / _this3._pageSize),
                                version: version
                              };
                              store.put(newMeta, _this3._path);
                              pages = Math.ceil(newContent.length / _this3._pageSize);
                              for (i = 0; i < pages; i++) {
                                store.put(newContent.slice(i * _this3._pageSize, (i + 1) * _this3._pageSize), "".concat(_this3._path, "-").concat(PvFileIDB.createPage(_this3._pagePtr + i)));
                              }
                              if (_this3.exists() && newMeta.numPages < _this3._meta.numPages) {
                                keyRange = IDBKeyRange.bound("".concat(_this3._path, "-").concat(PvFileIDB.createPage(newMeta.numPages)), "".concat(_this3._path, "-").concat(PvFileIDB.createPage(_this3._meta.numPages)), true);
                                store["delete"](keyRange);
                              }
                              store.transaction.onerror = function () {
                                reject(store.transaction.error);
                              };
                              store.transaction.oncomplete = function () {
                                _this3._meta = newMeta;
                                _this3.seek(0, 2);
                                resolve();
                              };
                            case 22:
                            case "end":
                              return _context3.stop();
                          }
                        }
                      }, _callee3);
                    }));
                    return function (_x4, _x5) {
                      return _ref.apply(this, arguments);
                    };
                  }()));
                case 2:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));
        function write(_x3) {
          return _write.apply(this, arguments);
        }
        return write;
      }()
      /**
       * Moves the current position in the stream by 'offset' elements at 'whence' position.
       * @param offset The number of bytes to move.
       * @param whence One of:
       *  - 0: moves position from beginning of file.
       *  - 1: moves position from current position in the stream.
       *  - 2: moves position from the last element of the file.
       * @throws Error if file doesn't exist or if EOF.
       */
    }, {
      key: "seek",
      value: function seek(offset, whence) {
        if (!this.exists() && this._mode === "readonly") {
          throw new Error("'".concat(this._path, "' doesn't exist."));
        }
        if (offset < 0) {
          var err = new Error("EOF");
          err.name = "EndOfFile";
          throw err;
        }
        var newOffset;
        if (whence === 0) {
          newOffset = Math.min(offset, this._meta.size);
        } else if (whence === 1) {
          var currentOffset = this._pageSize * this._pagePtr + this._pageOffset;
          newOffset = Math.min(currentOffset + offset, this._meta.size);
        } else if (whence === 2) {
          newOffset = Math.min(this._meta.size + offset, this._meta.size);
        } else {
          throw new Error("Invalid operation: ".concat(whence, "."));
        }
        this._pageOffset = newOffset % this._pageSize;
        this._pagePtr = Math.floor(newOffset / this._pageSize);
      }
      /**
       * Returns the number of bytes from the beginning of the file.
       */
    }, {
      key: "tell",
      value: function tell() {
        if (!this.exists()) {
          return -1;
        }
        return this._pagePtr * this._pageSize + this._pageOffset;
      }
      /**
       * Removes a file and any related pages given the path.
       */
    }, {
      key: "remove",
      value: function () {
        var _remove = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee6() {
          var _this4 = this;
          return regenerator.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  return _context6.abrupt("return", new Promise( /*#__PURE__*/function () {
                    var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5(resolve, reject) {
                      var numPages, keyRange, store, req;
                      return regenerator.wrap(function _callee5$(_context5) {
                        while (1) {
                          switch (_context5.prev = _context5.next) {
                            case 0:
                              numPages = _this4._meta.numPages;
                              keyRange = IDBKeyRange.bound(_this4._path, "".concat(_this4._path, "-").concat(PvFileIDB.createPage(numPages)));
                              store = _this4._store;
                              req = store["delete"](keyRange);
                              req.onerror = function () {
                                reject(req.error);
                              };
                              req.onsuccess = function () {
                                _this4._meta = undefined;
                                _this4._pageOffset = 0;
                                _this4._pagePtr = 0;
                                resolve();
                              };
                            case 6:
                            case "end":
                              return _context5.stop();
                          }
                        }
                      }, _callee5);
                    }));
                    return function (_x6, _x7) {
                      return _ref2.apply(this, arguments);
                    };
                  }()));
                case 1:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6);
        }));
        function remove() {
          return _remove.apply(this, arguments);
        }
        return remove;
      }()
      /**
       * Checks if the following path exists.
       */
    }, {
      key: "exists",
      value: function exists() {
        return this._meta !== undefined;
      }
      /**
       * Checks if the current stream is EOF.
       */
    }, {
      key: "_isEOF",
      get: function get() {
        return this._pagePtr >= this._meta.numPages - 1 && this._pageOffset >= this._meta.size % this._pageSize;
      }
      /**
       * Creates an index which as a key to save page data to IndexedDB.
       * This formats the file into 0000, 0001, 0002 ...
       * @param page The page number to format.
       */
    }, {
      key: "_store",
      get:
      /**
       * Gets a objectStore instance from the PvFile instance.
       */
      function get() {
        return this._db.transaction(PV_FILE_STORE, this._mode).objectStore(PV_FILE_STORE);
      }
    }], [{
      key: "open",
      value: function open(path, mode) {
        if (!self.indexedDB) {
          var error = new Error("IndexedDB is not supported");
          error.name = "IndexedDBNotSupported";
          throw error;
        }
        return new Promise( /*#__PURE__*/function () {
          var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee7(resolve, reject) {
            var db, req, _error2;
            return regenerator.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    _context7.prev = 0;
                    _context7.next = 3;
                    return getDB();
                  case 3:
                    db = _context7.sent;
                    req = db.transaction(PV_FILE_STORE, "readwrite").objectStore(PV_FILE_STORE).get(path);
                    req.onerror = function () {
                      reject(req.error);
                    };
                    req.onsuccess = function () {
                      var meta = req.result;
                      var dbMode = mode.includes('r') ? "readonly" : "readwrite";
                      if (meta === undefined && dbMode === "readonly") {
                        var _error = new Error("'".concat(path, "' doesn't exist."));
                        _error.name = "FileNotExists";
                        reject(_error);
                        return;
                      }
                      var fileIDB = new PvFileIDB(path, meta, db, dbMode);
                      if (mode.includes('a')) {
                        fileIDB.seek(0, 2);
                      }
                      resolve(fileIDB);
                    };
                    _context7.next = 12;
                    break;
                  case 9:
                    _context7.prev = 9;
                    _context7.t0 = _context7["catch"](0);
                    if (_context7.t0.name === "InvalidStateError") {
                      _error2 = new Error("IndexedDB is not supported");
                      _error2.name = "IndexedDBNotSupported";
                      reject(_error2);
                    } else {
                      reject(_context7.t0);
                    }
                  case 12:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, null, [[0, 9]]);
          }));
          return function (_x8, _x9) {
            return _ref3.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "createPage",
      value: function createPage(page) {
        return ("000" + page).slice(-4);
      }
    }]);
    return PvFileIDB;
  }(PvFile);

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  /**
   * PvFileMem Class
   * This class mocks the file system using in-memory storage.
   */
  var PvFileMem = /*#__PURE__*/function (_PvFile) {
    _inherits(PvFileMem, _PvFile);
    var _super = _createSuper(PvFileMem);
    function PvFileMem(path, meta, db, mode) {
      var _this;
      _classCallCheck(this, PvFileMem);
      _this = _super.call(this);
      _defineProperty(_assertThisInitialized(_this), "_pos", 0);
      _defineProperty(_assertThisInitialized(_this), "_mode", void 0);
      _this._path = path;
      _this._meta = meta;
      _this._mode = mode;
      return _this;
    }
    _createClass(PvFileMem, [{
      key: "close",
      value: function close() {
        return;
      }
    }, {
      key: "read",
      value: function read(size, count) {
        if (!this.exists()) {
          throw new Error("'".concat(this._path, "' doesn't exist."));
        }
        if (this._isEOF) {
          var err = new Error("EOF");
          err.name = "EndOfFile";
          throw err;
        }
        var toCopy = Math.min(size * count, this._file.length - this._pos);
        var totalElems = toCopy - toCopy % size;
        var buffer = new Uint8Array(totalElems);
        buffer.set(this._file.slice(this._pos, this._pos + totalElems), 0);
        this._pos += totalElems;
        return buffer;
      }
    }, {
      key: "write",
      value: function write(content) {
        var newFile = new Uint8Array(this._pos + content.length);
        if (this._file !== undefined) {
          newFile.set(this._file.slice(0, this._pos));
          newFile.set(content, this._pos);
        } else {
          newFile.set(content);
        }
        this._file = newFile;
        this._pos += content.length;
      }
    }, {
      key: "seek",
      value: function seek(offset, whence) {
        if (!this.exists() && this._mode === "readonly") {
          throw new Error("'".concat(this._path, "' doesn't exist."));
        }
        if (offset < 0) {
          var err = new Error("EOF");
          err.name = "EndOfFile";
          throw err;
        }
        var newOffset;
        if (whence === 0) {
          newOffset = Math.min(offset, this._file.length);
        } else if (whence === 1) {
          newOffset = Math.min(this._pos + offset, this._file.length);
        } else if (whence === 2) {
          newOffset = Math.min(this._file.length + offset, this._file.length);
        } else {
          throw new Error("Invalid operation: ".concat(whence, "."));
        }
        this._pos = newOffset;
      }
    }, {
      key: "tell",
      value: function tell() {
        if (!this.exists()) {
          return -1;
        }
        return this._pos;
      }
    }, {
      key: "remove",
      value: function () {
        var _remove = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  PvFileMem._memFiles["delete"](this._path);
                  this._file = undefined;
                  this._pos = 0;
                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));
        function remove() {
          return _remove.apply(this, arguments);
        }
        return remove;
      }()
    }, {
      key: "exists",
      value: function exists() {
        return this._file !== undefined;
      }
    }, {
      key: "_isEOF",
      get: function get() {
        return this._pos >= this._file.length;
      }
    }, {
      key: "_file",
      get: function get() {
        return PvFileMem._memFiles.get(this._path);
      },
      set: function set(content) {
        PvFileMem._memFiles.set(this._path, content);
      }
    }], [{
      key: "open",
      value: function open(path, mode) {
        var file = PvFileMem._memFiles.get(path);
        var dbMode = mode.includes('r') ? "readonly" : "readwrite";
        if (file === undefined && dbMode === "readonly") {
          var error = new Error("'".concat(path, "' doesn't exist."));
          error.name = "FileNotExists";
          throw error;
        }
        var fileMem = new PvFileMem(path, undefined, undefined, dbMode);
        if (mode.includes('a')) {
          fileMem.seek(0, 2);
        }
        return fileMem;
      }
    }]);
    return PvFileMem;
  }(PvFile);
  _defineProperty(PvFileMem, "_memFiles", new Map());

  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
  function _unsupportedIterableToArray$1$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1$1(o, minLen); }
  function _arrayLikeToArray$1$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  /**
   * Convert a null terminated phrase stored inside an array buffer to a string
   *
   * @param arrayBuffer input array buffer
   * @param indexStart the index at which the phrase is stored
   * @return retrieved string
   */
  function arrayBufferToStringAtIndex(arrayBuffer, indexStart) {
    var indexEnd = indexStart;
    while (arrayBuffer[indexEnd] !== 0) {
      indexEnd++;
    }
    var utf8decoder = new TextDecoder('utf-8');
    return utf8decoder.decode(arrayBuffer.subarray(indexStart, indexEnd));
  }
  /**
   * Decode a base64 string and stored it in a Uint8Array array
   *
   * @param base64String input base64 string
   * @return decoded array
   */
  function base64ToUint8Array(base64String) {
    var base64StringDecoded = atob(base64String);
    var binaryArray = new Uint8Array(base64StringDecoded.length);
    for (var i = 0; i < base64StringDecoded.length; i++) {
      binaryArray[i] = base64StringDecoded.charCodeAt(i);
    }
    return binaryArray;
  }
  /**
   * Convert a string header to JS object
   *
   * @param stringHeader input string in json format
   * @return retrieved object
   */
  // eslint-disable-next-line
  function stringHeaderToObject(stringHeader) {
    var objectHeader = {};
    var _iterator = _createForOfIteratorHelper$2(stringHeader.split('\r\n')),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var property = _step.value;
        var keyValuePair = property.split(': ');
        if (keyValuePair[0] !== '') {
          // @ts-ignore
          objectHeader[keyValuePair[0]] = keyValuePair[1];
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return objectHeader;
  }
  /**
   * A wrapper to fetch that also supports timeout
   *
   * @param uri the URL of the resource
   * @param options other options related to fetch
   * @param time timeout value
   * @return received response
   */
  function fetchWithTimeout(_x) {
    return _fetchWithTimeout.apply(this, arguments);
  }
  /**
   * Checking whether the given AccessKey is valid
   *
   * @return true if the AccessKey is valid, false if not
   */
  function _fetchWithTimeout() {
    _fetchWithTimeout = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(uri) {
      var options,
        time,
        controller,
        config,
        timeout,
        response,
        _args = arguments;
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
              time = _args.length > 2 && _args[2] !== undefined ? _args[2] : 5000;
              controller = new AbortController();
              config = _objectSpread$3(_objectSpread$3({}, options), {}, {
                signal: controller.signal
              });
              timeout = setTimeout(function () {
                controller.abort();
              }, time);
              _context.next = 7;
              return fetch(uri, config);
            case 7:
              response = _context.sent;
              clearTimeout(timeout);
              return _context.abrupt("return", response);
            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _fetchWithTimeout.apply(this, arguments);
  }
  function isAccessKeyValid(accessKey) {
    if (typeof accessKey !== 'string') {
      return false;
    }
    var accessKeyCleaned = accessKey.trim();
    if (accessKeyCleaned === '') {
      return false;
    }
    try {
      return btoa(atob(accessKeyCleaned)) === accessKeyCleaned;
    } catch (err) {
      return false;
    }
  }
  /**
   * Opens the file given the path and mode.
   * @returns PvFile instance.
   */
  function open(_x2, _x3) {
    return _open.apply(this, arguments);
  }
  /**
   * PvFile helper.
   * Write modelBase64 to modelPath depending on options forceWrite and version.
   */
  function _open() {
    _open = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(path, mode) {
      var error;
      return regenerator.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return PvFileIDB.open(path, mode);
            case 3:
              return _context2.abrupt("return", _context2.sent);
            case 6:
              _context2.prev = 6;
              _context2.t0 = _context2["catch"](0);
              if (_context2.t0.name === 'IndexedDBNotSupported') {
                // eslint-disable-next-line no-console
                console.warn('IndexedDB is not supported. Fallback to in-memory storage.');
              } else if (_context2.t0.name !== 'FileNotExists') {
                // eslint-disable-next-line no-console
                console.warn("Unable to access IndexedDB (".concat(_context2.t0.toString(), "). Fallback to in-memory storage."));
              }
              if (!(
              // @ts-ignore
              typeof WorkerGlobalScope !== 'undefined' &&
              // @ts-ignore
              self instanceof WorkerGlobalScope)) {
                _context2.next = 16;
                break;
              }
              if (!(_context2.t0.name === 'FileNotExists')) {
                _context2.next = 12;
                break;
              }
              throw _context2.t0;
            case 12:
              // eslint-disable-next-line no-console
              console.error('In-memory storage cannot be used inside a worker.');
              error = new Error("Failed to start PvFile: ".concat(_context2.t0.toString()));
              error.name = 'PvFileNotSupported';
              throw error;
            case 16:
              return _context2.abrupt("return", PvFileMem.open(path, mode));
            case 17:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[0, 6]]);
    }));
    return _open.apply(this, arguments);
  }
  function fromBase64(_x4, _x5, _x6, _x7) {
    return _fromBase.apply(this, arguments);
  }
  function _fromBase() {
    _fromBase = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(modelPath, modelBase64, forceWrite, version) {
      var pvFile;
      return regenerator.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return open(modelPath, 'w');
            case 2:
              pvFile = _context3.sent;
              if (!(forceWrite || pvFile.meta === undefined || version > pvFile.meta.version)) {
                _context3.next = 6;
                break;
              }
              _context3.next = 6;
              return pvFile.write(base64ToUint8Array(modelBase64), version);
            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _fromBase.apply(this, arguments);
  }
  var BACKOFF_CAP_MILLISECONDS = 5000;
  var BACKOFF_START_MILLISECONDS = 2;
  /**
   * PvFile helper.
   * Write publicPath's model to modelPath depending on options forceWrite and version.
   */
  function fromPublicDirectory(_x8, _x9, _x10, _x11, _x12) {
    return _fromPublicDirectory.apply(this, arguments);
  }
  /**
   * Takes a Picovoice model file and either decodes it from base64 or fetches
   * it from the public directory. Saves the result to storage on version increase or
   * if forceWrite is enabled.
   */
  function _fromPublicDirectory() {
    _fromPublicDirectory = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(modelPath, publicPath, forceWrite, version, numFetchReties) {
      var pvFile, waitTimeMilliseconds, delay, numAttemptsLeft, error, response, data, responseText;
      return regenerator.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return open(modelPath, 'w');
            case 2:
              pvFile = _context4.sent;
              if (!(forceWrite || pvFile.meta === undefined || version > pvFile.meta.version)) {
                _context4.next = 43;
                break;
              }
              if (!(numFetchReties < 0)) {
                _context4.next = 6;
                break;
              }
              throw Error('numFetchRetries must be a positive number');
            case 6:
              waitTimeMilliseconds = BACKOFF_START_MILLISECONDS;
              delay = function delay(delayMilliseconds) {
                return new Promise(function (resolve) {
                  setTimeout(resolve, delayMilliseconds);
                });
              };
              numAttemptsLeft = numFetchReties + 1;
              error = null;
            case 10:
              if (!(numAttemptsLeft > 0)) {
                _context4.next = 38;
                break;
              }
              error = null;
              _context4.prev = 12;
              _context4.next = 15;
              return fetch(publicPath, {
                cache: 'no-cache'
              });
            case 15:
              response = _context4.sent;
              if (!response.ok) {
                _context4.next = 23;
                break;
              }
              _context4.next = 19;
              return response.arrayBuffer();
            case 19:
              data = _context4.sent;
              _context4.next = 22;
              return pvFile.write(new Uint8Array(data), version);
            case 22:
              return _context4.abrupt("return");
            case 23:
              _context4.next = 25;
              return response.text();
            case 25:
              responseText = _context4.sent;
              error = new Error("Error response returned while fetching model from '".concat(publicPath, "': ").concat(responseText));
              _context4.next = 32;
              break;
            case 29:
              _context4.prev = 29;
              _context4.t0 = _context4["catch"](12);
              error = new Error("Failed to fetch model from '".concat(publicPath, "': ").concat(_context4.t0.message));
            case 32:
              numAttemptsLeft--;
              _context4.next = 35;
              return delay(waitTimeMilliseconds);
            case 35:
              waitTimeMilliseconds = Math.min(BACKOFF_CAP_MILLISECONDS, waitTimeMilliseconds * BACKOFF_START_MILLISECONDS);
              _context4.next = 10;
              break;
            case 38:
              if (!(error !== null)) {
                _context4.next = 42;
                break;
              }
              throw error;
            case 42:
              throw new Error("Unexpected error encountered while fetching model from '".concat(publicPath, "'"));
            case 43:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, null, [[12, 29]]);
    }));
    return _fromPublicDirectory.apply(this, arguments);
  }
  function loadModel(_x13) {
    return _loadModel.apply(this, arguments);
  }
  function _loadModel() {
    _loadModel = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5(model) {
      var base64, publicPath, customWritePath, _model$forceWrite, forceWrite, _model$version, version, _model$numFetchRetrie, numFetchRetries;
      return regenerator.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!(model === undefined || model === null)) {
                _context5.next = 2;
                break;
              }
              throw new Error('The model is undefined / empty');
            case 2:
              base64 = model.base64, publicPath = model.publicPath, customWritePath = model.customWritePath, _model$forceWrite = model.forceWrite, forceWrite = _model$forceWrite === void 0 ? false : _model$forceWrite, _model$version = model.version, version = _model$version === void 0 ? 1 : _model$version, _model$numFetchRetrie = model.numFetchRetries, numFetchRetries = _model$numFetchRetrie === void 0 ? 0 : _model$numFetchRetrie;
              if (!(customWritePath === undefined || customWritePath === null)) {
                _context5.next = 5;
                break;
              }
              throw new Error('The customWritePath of the provided model is undefined / empty');
            case 5:
              if (!(base64 !== undefined && base64 !== null)) {
                _context5.next = 10;
                break;
              }
              _context5.next = 8;
              return fromBase64(customWritePath, base64, forceWrite, version);
            case 8:
              _context5.next = 16;
              break;
            case 10:
              if (!(publicPath !== undefined && publicPath !== null)) {
                _context5.next = 15;
                break;
              }
              _context5.next = 13;
              return fromPublicDirectory(customWritePath, publicPath, forceWrite, version, numFetchRetries);
            case 13:
              _context5.next = 16;
              break;
            case 15:
              throw new Error("The provided model doesn't contain a valid publicPath or base64 value");
            case 16:
              return _context5.abrupt("return", customWritePath);
            case 17:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));
    return _loadModel.apply(this, arguments);
  }

  /*
    Copyright 2022 Picovoice Inc.

    You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
    file accompanying this source.

    Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
    an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
    specific language governing permissions and limitations under the License.
  */
  /* eslint camelcase: 0, arrow-body-style: 0, @typescript-eslint/no-unused-vars: 0, @typescript-eslint/explicit-module-boundary-types: 0 */
  var wasiSnapshotPreview1Emulator = {
    args_get: function args_get(input) {
      return 0;
    },
    args_sizes_get: function args_sizes_get(input) {
      return 0;
    },
    environ_get: function environ_get(input) {
      return 0;
    },
    environ_sizes_get: function environ_sizes_get(input) {
      return 0;
    },
    clock_res_get: function clock_res_get(input) {
      return 0;
    },
    clock_time_get: function clock_time_get(input) {
      return 0;
    },
    fd_advise: function fd_advise(input) {
      return 0;
    },
    fd_allocate: function fd_allocate(input) {
      return 0;
    },
    fd_close: function fd_close(input) {
      return 0;
    },
    fd_datasync: function fd_datasync(input) {
      return 0;
    },
    fd_fdstat_get: function fd_fdstat_get(input) {
      return 0;
    },
    fd_fdstat_set_flags: function fd_fdstat_set_flags(input) {
      return 0;
    },
    fd_fdstat_set_rights: function fd_fdstat_set_rights(input) {
      return 0;
    },
    fd_filestat_get: function fd_filestat_get(input) {
      return 0;
    },
    fd_filestat_set_size: function fd_filestat_set_size(input) {
      return 0;
    },
    fd_filestat_set_times: function fd_filestat_set_times(input) {
      return 0;
    },
    fd_pread: function fd_pread(input) {
      return 0;
    },
    fd_prestat_get: function fd_prestat_get(input) {
      return 0;
    },
    fd_prestat_dir_name: function fd_prestat_dir_name(input) {
      return 0;
    },
    fd_pwrite: function fd_pwrite(input) {
      return 0;
    },
    fd_read: function fd_read(input) {
      return 0;
    },
    fd_readdir: function fd_readdir(input) {
      return 0;
    },
    fd_renumber: function fd_renumber(input) {
      return 0;
    },
    fd_seek: function fd_seek(input) {
      return 0;
    },
    fd_sync: function fd_sync(input) {
      return 0;
    },
    fd_tell: function fd_tell(input) {
      return 0;
    },
    fd_write: function fd_write(input) {
      return 0;
    },
    path_create_directory: function path_create_directory(input) {
      return 0;
    },
    path_filestat_get: function path_filestat_get(input) {
      return 0;
    },
    path_filestat_set_times: function path_filestat_set_times(input) {
      return 0;
    },
    path_link: function path_link(input) {
      return 0;
    },
    path_open: function path_open(input) {
      return 0;
    },
    path_readlink: function path_readlink(input) {
      return 0;
    },
    path_remove_directory: function path_remove_directory(input) {
      return 0;
    },
    path_rename: function path_rename(input) {
      return 0;
    },
    path_symlink: function path_symlink(input) {
      return 0;
    },
    path_unlink_file: function path_unlink_file(input) {
      return 0;
    },
    poll_oneoff: function poll_oneoff(input) {
      return 0;
    },
    proc_exit: function proc_exit(input) {
      return 0;
    },
    proc_raise: function proc_raise(input) {
      return 0;
    },
    sched_yield: function sched_yield(input) {
      return 0;
    },
    random_get: function random_get(input) {
      return 0;
    },
    sock_recv: function sock_recv(input) {
      return 0;
    },
    sock_send: function sock_send(input) {
      return 0;
    },
    sock_shutdown: function sock_shutdown(input) {
      return 0;
    }
  };

  /**
   * Imports and Exports functions required for WASM.
   *
   * @param memory Initialized WebAssembly memory object.
   * @param wasm The wasm file in base64 string or stream to public path (i.e. fetch("file.wasm")) to initialize.
   * @param pvError The PvError object to store error details.
   * @returns An object containing the exported functions from WASM.
   */
  function buildWasm(_x, _x2, _x3) {
    return _buildWasm.apply(this, arguments);
  }
  function _buildWasm() {
    _buildWasm = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee9(memory, wasm, pvError) {
      var memoryBufferUint8, memoryBufferInt32, pvConsoleLogWasm, pvAssertWasm, pvTimeWasm, pvHttpsRequestWasm, pvGetBrowserInfo, pvGetOriginInfo, pvFileOpenWasm, pvFileCloseWasm, pvFileReadWasm, pvFileWriteWasm, pvFileSeekWasm, pvFileTellWasm, pvFileRemoveWasm, importObject, instance, response, data, wasmCodeArray, aligned_alloc;
      return regenerator.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              memoryBufferUint8 = new Uint8Array(memory.buffer);
              memoryBufferInt32 = new Int32Array(memory.buffer);
              pvConsoleLogWasm = function pvConsoleLogWasm(index) {
                // eslint-disable-next-line no-console
                console.log(arrayBufferToStringAtIndex(memoryBufferUint8, index));
              };
              pvAssertWasm = function pvAssertWasm(expr, line, fileNameAddress) {
                if (expr === 0) {
                  var fileName = arrayBufferToStringAtIndex(memoryBufferUint8, fileNameAddress);
                  throw new Error("assertion failed at line ".concat(line, " in \"").concat(fileName, "\""));
                }
              };
              pvTimeWasm = function pvTimeWasm() {
                return Date.now() / 1000;
              };
              pvHttpsRequestWasm = /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(httpMethodAddress, serverNameAddress, endpointAddress, headerAddress, bodyAddress, timeoutMs, responseAddressAddress, responseSizeAddress, responseCodeAddress) {
                  var httpMethod, serverName, endpoint, header, body, headerObject, response, responseText, statusCode, responseAddress, i;
                  return regenerator.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          httpMethod = arrayBufferToStringAtIndex(memoryBufferUint8, httpMethodAddress);
                          serverName = arrayBufferToStringAtIndex(memoryBufferUint8, serverNameAddress);
                          endpoint = arrayBufferToStringAtIndex(memoryBufferUint8, endpointAddress);
                          header = arrayBufferToStringAtIndex(memoryBufferUint8, headerAddress);
                          body = arrayBufferToStringAtIndex(memoryBufferUint8, bodyAddress);
                          headerObject = stringHeaderToObject(header);
                          _context.prev = 6;
                          _context.next = 9;
                          return fetchWithTimeout('https://' + serverName + endpoint, {
                            method: httpMethod,
                            headers: headerObject,
                            body: body
                          }, timeoutMs);
                        case 9:
                          response = _context.sent;
                          statusCode = response.status;
                          _context.next = 17;
                          break;
                        case 13:
                          _context.prev = 13;
                          _context.t0 = _context["catch"](6);
                          pvError === null || pvError === void 0 ? void 0 : pvError.addError('pvHttpsRequestWasm', "Failed to fetch: ".concat(_context.t0));
                          statusCode = 0;
                        case 17:
                          if (!(response !== undefined)) {
                            _context.next = 38;
                            break;
                          }
                          _context.prev = 18;
                          _context.next = 21;
                          return response.text();
                        case 21:
                          responseText = _context.sent;
                          _context.next = 29;
                          break;
                        case 24:
                          _context.prev = 24;
                          _context.t1 = _context["catch"](18);
                          pvError === null || pvError === void 0 ? void 0 : pvError.addError('pvHttpsRequestWasm', "Failed to get response text: ".concat(_context.t1));
                          responseText = '';
                          statusCode = 1;
                        case 29:
                          _context.next = 31;
                          return aligned_alloc(Int8Array.BYTES_PER_ELEMENT, (responseText.length + 1) * Int8Array.BYTES_PER_ELEMENT);
                        case 31:
                          responseAddress = _context.sent;
                          if (!(responseAddress === 0)) {
                            _context.next = 34;
                            break;
                          }
                          throw new Error('malloc failed: Cannot allocate memory');
                        case 34:
                          memoryBufferInt32[responseSizeAddress / Int32Array.BYTES_PER_ELEMENT] = responseText.length + 1;
                          memoryBufferInt32[responseAddressAddress / Int32Array.BYTES_PER_ELEMENT] = responseAddress;
                          for (i = 0; i < responseText.length; i++) {
                            memoryBufferUint8[responseAddress + i] = responseText.charCodeAt(i);
                          }
                          memoryBufferUint8[responseAddress + responseText.length] = 0;
                        case 38:
                          memoryBufferInt32[responseCodeAddress / Int32Array.BYTES_PER_ELEMENT] = statusCode;
                        case 39:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, null, [[6, 13], [18, 24]]);
                }));
                return function pvHttpsRequestWasm(_x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11, _x12) {
                  return _ref.apply(this, arguments);
                };
              }();
              pvGetBrowserInfo = /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(browserInfoAddressAddress) {
                  var userAgent, browserInfoAddress, i;
                  return regenerator.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          userAgent = navigator.userAgent !== undefined ? navigator.userAgent : 'unknown'; // eslint-disable-next-line
                          _context2.next = 3;
                          return aligned_alloc(Uint8Array.BYTES_PER_ELEMENT, (userAgent.length + 1) * Uint8Array.BYTES_PER_ELEMENT);
                        case 3:
                          browserInfoAddress = _context2.sent;
                          if (!(browserInfoAddress === 0)) {
                            _context2.next = 6;
                            break;
                          }
                          throw new Error('malloc failed: Cannot allocate memory');
                        case 6:
                          memoryBufferInt32[browserInfoAddressAddress / Int32Array.BYTES_PER_ELEMENT] = browserInfoAddress;
                          for (i = 0; i < userAgent.length; i++) {
                            memoryBufferUint8[browserInfoAddress + i] = userAgent.charCodeAt(i);
                          }
                          memoryBufferUint8[browserInfoAddress + userAgent.length] = 0;
                        case 9:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }));
                return function pvGetBrowserInfo(_x13) {
                  return _ref2.apply(this, arguments);
                };
              }();
              pvGetOriginInfo = /*#__PURE__*/function () {
                var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(originInfoAddressAddress) {
                  var _self$origin;
                  var origin, hostname, originInfoAddress, i;
                  return regenerator.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          origin = (_self$origin = self.origin) !== null && _self$origin !== void 0 ? _self$origin : self.location.origin;
                          hostname = new URL(origin).hostname; // eslint-disable-next-line
                          _context3.next = 4;
                          return aligned_alloc(Uint8Array.BYTES_PER_ELEMENT, (hostname.length + 1) * Uint8Array.BYTES_PER_ELEMENT);
                        case 4:
                          originInfoAddress = _context3.sent;
                          if (!(originInfoAddress === 0)) {
                            _context3.next = 7;
                            break;
                          }
                          throw new Error('malloc failed: Cannot allocate memory');
                        case 7:
                          memoryBufferInt32[originInfoAddressAddress / Int32Array.BYTES_PER_ELEMENT] = originInfoAddress;
                          for (i = 0; i < hostname.length; i++) {
                            memoryBufferUint8[originInfoAddress + i] = hostname.charCodeAt(i);
                          }
                          memoryBufferUint8[originInfoAddress + hostname.length] = 0;
                        case 10:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }));
                return function pvGetOriginInfo(_x14) {
                  return _ref3.apply(this, arguments);
                };
              }();
              pvFileOpenWasm = /*#__PURE__*/function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(fileAddress, pathAddress, modeAddress, statusAddress) {
                  var path, mode, file;
                  return regenerator.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          path = arrayBufferToStringAtIndex(memoryBufferUint8, pathAddress);
                          mode = arrayBufferToStringAtIndex(memoryBufferUint8, modeAddress);
                          _context4.prev = 2;
                          _context4.next = 5;
                          return open(path, mode);
                        case 5:
                          file = _context4.sent;
                          PvFile.setPtr(fileAddress, file);
                          memoryBufferInt32[statusAddress / Int32Array.BYTES_PER_ELEMENT] = 0;
                          _context4.next = 14;
                          break;
                        case 10:
                          _context4.prev = 10;
                          _context4.t0 = _context4["catch"](2);
                          if (_context4.t0.name !== "FileNotExists") {
                            pvError === null || pvError === void 0 ? void 0 : pvError.addError('pvFileOpenWasm', _context4.t0);
                          }
                          memoryBufferInt32[statusAddress / Int32Array.BYTES_PER_ELEMENT] = -1;
                        case 14:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4, null, [[2, 10]]);
                }));
                return function pvFileOpenWasm(_x15, _x16, _x17, _x18) {
                  return _ref4.apply(this, arguments);
                };
              }();
              pvFileCloseWasm = /*#__PURE__*/function () {
                var _ref5 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5(fileAddress, statusAddress) {
                  var file;
                  return regenerator.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          _context5.prev = 0;
                          _context5.next = 3;
                          return PvFile.getPtr(fileAddress);
                        case 3:
                          file = _context5.sent;
                          _context5.next = 6;
                          return file.close();
                        case 6:
                          memoryBufferInt32[statusAddress / Int32Array.BYTES_PER_ELEMENT] = 0;
                          _context5.next = 13;
                          break;
                        case 9:
                          _context5.prev = 9;
                          _context5.t0 = _context5["catch"](0);
                          pvError === null || pvError === void 0 ? void 0 : pvError.addError('pvFileCloseWasm', _context5.t0);
                          memoryBufferInt32[statusAddress / Int32Array.BYTES_PER_ELEMENT] = -1;
                        case 13:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5, null, [[0, 9]]);
                }));
                return function pvFileCloseWasm(_x19, _x20) {
                  return _ref5.apply(this, arguments);
                };
              }();
              pvFileReadWasm = /*#__PURE__*/function () {
                var _ref6 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee6(fileAddress, contentAddress, size, count, numReadAddress) {
                  var file, content;
                  return regenerator.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          _context6.prev = 0;
                          _context6.next = 3;
                          return PvFile.getPtr(fileAddress);
                        case 3:
                          file = _context6.sent;
                          _context6.next = 6;
                          return file.read(size, count);
                        case 6:
                          content = _context6.sent;
                          memoryBufferUint8.set(content, contentAddress);
                          memoryBufferInt32[numReadAddress / Int32Array.BYTES_PER_ELEMENT] = content.length / size;
                          _context6.next = 15;
                          break;
                        case 11:
                          _context6.prev = 11;
                          _context6.t0 = _context6["catch"](0);
                          pvError === null || pvError === void 0 ? void 0 : pvError.addError('pvFileReadWasm', _context6.t0);
                          memoryBufferInt32[numReadAddress / Int32Array.BYTES_PER_ELEMENT] = -1;
                        case 15:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _callee6, null, [[0, 11]]);
                }));
                return function pvFileReadWasm(_x21, _x22, _x23, _x24, _x25) {
                  return _ref6.apply(this, arguments);
                };
              }();
              pvFileWriteWasm = /*#__PURE__*/function () {
                var _ref7 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee7(fileAddress, contentAddress, size, count, numWriteAddress) {
                  var file, content;
                  return regenerator.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          _context7.prev = 0;
                          _context7.next = 3;
                          return PvFile.getPtr(fileAddress);
                        case 3:
                          file = _context7.sent;
                          content = new Uint8Array(size * count);
                          content.set(memoryBufferUint8.slice(contentAddress, contentAddress + size * count), 0);
                          _context7.next = 8;
                          return file.write(content);
                        case 8:
                          memoryBufferInt32[numWriteAddress / Int32Array.BYTES_PER_ELEMENT] = content.length / size;
                          _context7.next = 15;
                          break;
                        case 11:
                          _context7.prev = 11;
                          _context7.t0 = _context7["catch"](0);
                          pvError === null || pvError === void 0 ? void 0 : pvError.addError('pvFileWriteWasm', _context7.t0);
                          memoryBufferInt32[numWriteAddress / Int32Array.BYTES_PER_ELEMENT] = 1;
                        case 15:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7, null, [[0, 11]]);
                }));
                return function pvFileWriteWasm(_x26, _x27, _x28, _x29, _x30) {
                  return _ref7.apply(this, arguments);
                };
              }();
              pvFileSeekWasm = function pvFileSeekWasm(fileAddress, offset, whence, statusAddress) {
                try {
                  var file = PvFile.getPtr(fileAddress);
                  file.seek(offset, whence);
                  memoryBufferInt32[statusAddress / Int32Array.BYTES_PER_ELEMENT] = 0;
                } catch (e) {
                  pvError === null || pvError === void 0 ? void 0 : pvError.addError('pvFileSeekWasm', e);
                  memoryBufferInt32[statusAddress / Int32Array.BYTES_PER_ELEMENT] = -1;
                }
              };
              pvFileTellWasm = function pvFileTellWasm(fileAddress, offsetAddress) {
                try {
                  var file = PvFile.getPtr(fileAddress);
                  memoryBufferInt32[offsetAddress / Int32Array.BYTES_PER_ELEMENT] = file.tell();
                } catch (e) {
                  pvError === null || pvError === void 0 ? void 0 : pvError.addError('pvFileTellWasm', e);
                  memoryBufferInt32[offsetAddress / Int32Array.BYTES_PER_ELEMENT] = -1;
                }
              };
              pvFileRemoveWasm = /*#__PURE__*/function () {
                var _ref8 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee8(pathAddress, statusAddress) {
                  var path, file;
                  return regenerator.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          path = arrayBufferToStringAtIndex(memoryBufferUint8, pathAddress);
                          _context8.prev = 1;
                          _context8.next = 4;
                          return open(path, "w");
                        case 4:
                          file = _context8.sent;
                          _context8.next = 7;
                          return file.remove();
                        case 7:
                          memoryBufferInt32[statusAddress / Int32Array.BYTES_PER_ELEMENT] = 0;
                          _context8.next = 14;
                          break;
                        case 10:
                          _context8.prev = 10;
                          _context8.t0 = _context8["catch"](1);
                          pvError === null || pvError === void 0 ? void 0 : pvError.addError('pvFileRemoveWasm', _context8.t0);
                          memoryBufferInt32[statusAddress / Int32Array.BYTES_PER_ELEMENT] = -1;
                        case 14:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8, null, [[1, 10]]);
                }));
                return function pvFileRemoveWasm(_x31, _x32) {
                  return _ref8.apply(this, arguments);
                };
              }();
              importObject = {
                // eslint-disable-next-line camelcase
                wasi_snapshot_preview1: wasiSnapshotPreview1Emulator,
                env: {
                  memory: memory,
                  pv_console_log_wasm: pvConsoleLogWasm,
                  pv_assert_wasm: pvAssertWasm,
                  pv_time_wasm: pvTimeWasm,
                  pv_https_request_wasm: pvHttpsRequestWasm,
                  pv_get_browser_info: pvGetBrowserInfo,
                  pv_get_origin_info: pvGetOriginInfo,
                  pv_file_open_wasm: pvFileOpenWasm,
                  pv_file_close_wasm: pvFileCloseWasm,
                  pv_file_read_wasm: pvFileReadWasm,
                  pv_file_write_wasm: pvFileWriteWasm,
                  pv_file_seek_wasm: pvFileSeekWasm,
                  pv_file_tell_wasm: pvFileTellWasm,
                  pv_file_remove_wasm: pvFileRemoveWasm
                }
              };
              if (!(wasm instanceof Promise)) {
                _context9.next = 34;
                break;
              }
              if (!a) {
                _context9.next = 23;
                break;
              }
              _context9.next = 20;
              return a(wasm, importObject);
            case 20:
              instance = _context9.sent.instance;
              _context9.next = 32;
              break;
            case 23:
              _context9.next = 25;
              return wasm;
            case 25:
              response = _context9.sent;
              _context9.next = 28;
              return response.arrayBuffer();
            case 28:
              data = _context9.sent;
              _context9.next = 31;
              return n(new Uint8Array(data), importObject);
            case 31:
              instance = _context9.sent.instance;
            case 32:
              _context9.next = 38;
              break;
            case 34:
              wasmCodeArray = base64ToUint8Array(wasm);
              _context9.next = 37;
              return n(wasmCodeArray, importObject);
            case 37:
              instance = _context9.sent.instance;
            case 38:
              aligned_alloc = instance.exports.aligned_alloc;
              return _context9.abrupt("return", instance.exports);
            case 40:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));
    return _buildWasm.apply(this, arguments);
  }

  function _arrayLikeToArray$2(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$2(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _unsupportedIterableToArray$2(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableSpread();
  }

  /*
    Copyright 2023 Picovoice Inc.

    You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
    file accompanying this source.

    Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
    an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
    specific language governing permissions and limitations under the License.
  */
  var PvError = /*#__PURE__*/function () {
    function PvError() {
      _classCallCheck(this, PvError);
      _defineProperty(this, "_maxNumErrors", 10);
      _defineProperty(this, "_errors", []);
      _defineProperty(this, "_lastError", void 0);
    }
    _createClass(PvError, [{
      key: "addError",
      value:
      /**
       * Store an error with a key and message.
       */
      function addError(key, error) {
        this._lastError = error instanceof Error ? error : new Error(error);
        if (this._errors.length >= this._maxNumErrors) {
          this._errors.shift();
        }
        if (error instanceof Error) {
          this._errors.push({
            key: key,
            message: error.toString()
          });
        } else {
          this._errors.push({
            key: key,
            message: JSON.stringify(error)
          });
        }
      }
      /**
       * Get all recent error messages. Cleans up error list.
       */
    }, {
      key: "getErrors",
      value: function getErrors() {
        var errors = _toConsumableArray(this._errors);
        this._errors = [];
        return errors;
      }
      /**
       * Get errors formatted into a string.
       */
    }, {
      key: "getErrorString",
      value: function getErrorString() {
        return this.getErrors().map(function (_ref) {
          var key = _ref.key,
            message = _ref.message;
          return "'".concat(key, "' failed with: ").concat(message, ".");
        }).join('\n');
      }
      /**
       * Returns the last error message added to the object.
       */
    }, {
      key: "getLastError",
      value: function getLastError() {
        return this._lastError;
      }
      /**
       * Sets the maximum number of errors it can store.
       */
    }, {
      key: "setMaxErrorNum",
      value: function setMaxErrorNum(num) {
        this._maxNumErrors = num;
      }
    }]);
    return PvError;
  }();

  const simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11]));

  var ALEXA_64 = "";

  var AMERICANO_64 = "";

  var BLUEBERRY_64 = "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";

  var BUMBLEBEE_64 = "";

  var COMPUTER_64 = "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";

  var GRAPEFRUIT_64 = "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";

  var GRASSHOPPER_64 = "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";

  var HEY_GOOGLE_64 = "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";

  var HEY_SIRI_64 = "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";

  var JARVIS_64 = "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";

  var OK_GOOGLE_64 = "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";

  var PICOVOICE_64 = "";

  var PORCUPINE_64 = "";

  var TERMINATOR_64 = "";

  /*
    Copyright 2021 Picovoice Inc.

    You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
    file accompanying this source.

    Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
    an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
    specific language governing permissions and limitations under the License.
  */
  exports.BuiltInKeyword = void 0;
  (function (BuiltInKeyword) {
    BuiltInKeyword["Alexa"] = "Alexa";
    BuiltInKeyword["Americano"] = "Americano";
    BuiltInKeyword["Blueberry"] = "Blueberry";
    BuiltInKeyword["Bumblebee"] = "Bumblebee";
    BuiltInKeyword["Computer"] = "Computer";
    BuiltInKeyword["Grapefruit"] = "Grapefruit";
    BuiltInKeyword["Grasshopper"] = "Grasshopper";
    BuiltInKeyword["HeyGoogle"] = "Hey Google";
    BuiltInKeyword["HeySiri"] = "Hey Siri";
    BuiltInKeyword["Jarvis"] = "Jarvis";
    BuiltInKeyword["OkayGoogle"] = "Okay Google";
    BuiltInKeyword["Picovoice"] = "Picovoice";
    BuiltInKeyword["Porcupine"] = "Porcupine";
    BuiltInKeyword["Terminator"] = "Terminator";
  })(exports.BuiltInKeyword || (exports.BuiltInKeyword = {}));
  var BUILT_IN_KEYWORD_BYTES = new Map();
  BUILT_IN_KEYWORD_BYTES.set(exports.BuiltInKeyword.Alexa, ALEXA_64);
  BUILT_IN_KEYWORD_BYTES.set(exports.BuiltInKeyword.Americano, AMERICANO_64);
  BUILT_IN_KEYWORD_BYTES.set(exports.BuiltInKeyword.Blueberry, BLUEBERRY_64);
  BUILT_IN_KEYWORD_BYTES.set(exports.BuiltInKeyword.Bumblebee, BUMBLEBEE_64);
  BUILT_IN_KEYWORD_BYTES.set(exports.BuiltInKeyword.Computer, COMPUTER_64);
  BUILT_IN_KEYWORD_BYTES.set(exports.BuiltInKeyword.Jarvis, JARVIS_64);
  BUILT_IN_KEYWORD_BYTES.set(exports.BuiltInKeyword.Grapefruit, GRAPEFRUIT_64);
  BUILT_IN_KEYWORD_BYTES.set(exports.BuiltInKeyword.Grasshopper, GRASSHOPPER_64);
  BUILT_IN_KEYWORD_BYTES.set(exports.BuiltInKeyword.HeyGoogle, HEY_GOOGLE_64);
  BUILT_IN_KEYWORD_BYTES.set(exports.BuiltInKeyword.HeySiri, HEY_SIRI_64);
  BUILT_IN_KEYWORD_BYTES.set(exports.BuiltInKeyword.OkayGoogle, OK_GOOGLE_64);
  BUILT_IN_KEYWORD_BYTES.set(exports.BuiltInKeyword.Picovoice, PICOVOICE_64);
  BUILT_IN_KEYWORD_BYTES.set(exports.BuiltInKeyword.Porcupine, PORCUPINE_64);
  BUILT_IN_KEYWORD_BYTES.set(exports.BuiltInKeyword.Terminator, TERMINATOR_64);

  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
  function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }
  function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
  var DEFAULT_SENSITIVITY = 0.5;
  function keywordsProcess(_x) {
    return _keywordsProcess.apply(this, arguments);
  }
  function _keywordsProcess() {
    _keywordsProcess = _asyncToGenerator$1( /*#__PURE__*/regenerator$1.mark(function _callee(keywords) {
      var keywordSensitivities, keywordLabels, keywordPaths, _iterator, _step, _keywordArgNormalized, keyword, keywordArgNormalized, customWritePath, validEnums, builtInName, keywordEnum, _i, _keywordSensitivities, sensitivity, sensitivities;
      return regenerator$1.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!(keywords === undefined || keywords === null)) {
              _context.next = 2;
              break;
            }
            throw new Error('The keywords argument is undefined / empty');
          case 2:
            if (Array.isArray(keywords)) {
              _context.next = 6;
              break;
            }
            keywords = [keywords]; // eslint-disable-line
            _context.next = 8;
            break;
          case 6:
            if (!(keywords.length === 0)) {
              _context.next = 8;
              break;
            }
            throw new Error('The keywords argument array is empty');
          case 8:
            keywordSensitivities = [];
            keywordLabels = [];
            keywordPaths = [];
            _iterator = _createForOfIteratorHelper$1(keywords);
            _context.prev = 12;
            _iterator.s();
          case 14:
            if ((_step = _iterator.n()).done) {
              _context.next = 50;
              break;
            }
            keyword = _step.value;
            // normalize keywords to PorcupineKeyword
            keywordArgNormalized = void 0;
            if (!(typeof keyword === 'string')) {
              _context.next = 21;
              break;
            }
            keywordArgNormalized = {
              builtin: keyword,
              sensitivity: DEFAULT_SENSITIVITY
            };
            _context.next = 26;
            break;
          case 21:
            if (!(_typeof$1(keyword) !== 'object')) {
              _context.next = 25;
              break;
            }
            throw new Error('Invalid keyword argument type: ' + keyword + ' : ' + _typeof$1(keyword));
          case 25:
            keywordArgNormalized = keyword;
          case 26:
            if (!('label' in keywordArgNormalized)) {
              _context.next = 34;
              break;
            }
            customWritePath = keywordArgNormalized.customWritePath ? keywordArgNormalized.customWritePath : keywordArgNormalized.label;
            _context.next = 30;
            return loadModel(_objectSpread$2(_objectSpread$2({}, keywordArgNormalized), {}, {
              customWritePath: customWritePath
            }));
          case 30:
            keywordLabels.push(keywordArgNormalized.label);
            keywordPaths.push(customWritePath);
            _context.next = 47;
            break;
          case 34:
            if (!('builtin' in keywordArgNormalized)) {
              _context.next = 46;
              break;
            }
            validEnums = Object.values(exports.BuiltInKeyword);
            builtInName = keywordArgNormalized.builtin; // @ts-ignore
            keywordEnum = exports.BuiltInKeyword[builtInName.replace(' ', '')];
            if (validEnums.includes(keywordEnum)) {
              _context.next = 40;
              break;
            }
            throw new Error("Keyword ".concat(builtInName, " does not map to list of built-in keywords (").concat(validEnums, ")"));
          case 40:
            _context.next = 42;
            return loadModel({
              base64: BUILT_IN_KEYWORD_BYTES.get(keywordEnum),
              customWritePath: keywordArgNormalized.builtin,
              forceWrite: true
            });
          case 42:
            keywordLabels.push(keywordArgNormalized.builtin);
            keywordPaths.push(keywordArgNormalized.builtin);
            _context.next = 47;
            break;
          case 46:
            throw new Error('Unknown keyword argument: ' + JSON.stringify(keyword));
          case 47:
            keywordSensitivities.push((_keywordArgNormalized = keywordArgNormalized.sensitivity) !== null && _keywordArgNormalized !== void 0 ? _keywordArgNormalized : DEFAULT_SENSITIVITY);
          case 48:
            _context.next = 14;
            break;
          case 50:
            _context.next = 55;
            break;
          case 52:
            _context.prev = 52;
            _context.t0 = _context["catch"](12);
            _iterator.e(_context.t0);
          case 55:
            _context.prev = 55;
            _iterator.f();
            return _context.finish(55);
          case 58:
            _i = 0, _keywordSensitivities = keywordSensitivities;
          case 59:
            if (!(_i < _keywordSensitivities.length)) {
              _context.next = 68;
              break;
            }
            sensitivity = _keywordSensitivities[_i];
            if (!(typeof sensitivity !== 'number')) {
              _context.next = 63;
              break;
            }
            throw new Error('Sensitivity is not a number (in range [0,1]): ' + sensitivity);
          case 63:
            if (!(sensitivity < 0 || sensitivity > 1)) {
              _context.next = 65;
              break;
            }
            throw new Error('Sensitivity is outside of range [0, 1]: ' + sensitivity);
          case 65:
            _i++;
            _context.next = 59;
            break;
          case 68:
            if (!(keywordSensitivities.length !== keywordLabels.length)) {
              _context.next = 70;
              break;
            }
            throw new Error("keywordSensitivities (".concat(keywordSensitivities.length, ") and keywordLabels (").concat(keywordLabels.length, ") length differs"));
          case 70:
            sensitivities = new Float32Array(keywordSensitivities);
            return _context.abrupt("return", [keywordPaths, keywordLabels, sensitivities]);
          case 72:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[12, 52, 55, 58]]);
    }));
    return _keywordsProcess.apply(this, arguments);
  }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var PV_STATUS_SUCCESS = 10000;
  var Porcupine = /*#__PURE__*/function () {
    function Porcupine(handleWasm, keywordLabels, keywordDetectionCallback, processErrorCallback) {
      _classCallCheck$1(this, Porcupine);
      _defineProperty$1(this, "_pvPorcupineDelete", void 0);
      _defineProperty$1(this, "_pvPorcupineProcess", void 0);
      _defineProperty$1(this, "_pvStatusToString", void 0);
      _defineProperty$1(this, "_wasmMemory", void 0);
      _defineProperty$1(this, "_pvFree", void 0);
      _defineProperty$1(this, "_memoryBuffer", void 0);
      _defineProperty$1(this, "_memoryBufferUint8", void 0);
      _defineProperty$1(this, "_memoryBufferView", void 0);
      _defineProperty$1(this, "_processMutex", void 0);
      _defineProperty$1(this, "_objectAddress", void 0);
      _defineProperty$1(this, "_inputBufferAddress", void 0);
      _defineProperty$1(this, "_alignedAlloc", void 0);
      _defineProperty$1(this, "_keywordIndexAddress", void 0);
      _defineProperty$1(this, "_keywordLabels", void 0);
      _defineProperty$1(this, "_keywordDetectionCallback", void 0);
      _defineProperty$1(this, "_processErrorCallback", void 0);
      Porcupine._frameLength = handleWasm.frameLength;
      Porcupine._sampleRate = handleWasm.sampleRate;
      Porcupine._version = handleWasm.version;
      this._pvPorcupineDelete = handleWasm.pvPorcupineDelete;
      this._pvPorcupineProcess = handleWasm.pvPorcupineProcess;
      this._pvStatusToString = handleWasm.pvStatusToString;
      this._wasmMemory = handleWasm.memory;
      this._pvFree = handleWasm.pvFree;
      this._objectAddress = handleWasm.objectAddress;
      this._inputBufferAddress = handleWasm.inputBufferAddress;
      this._alignedAlloc = handleWasm.aligned_alloc;
      this._keywordIndexAddress = handleWasm.keywordIndexAddress;
      this._memoryBuffer = new Int16Array(handleWasm.memory.buffer);
      this._memoryBufferUint8 = new Uint8Array(handleWasm.memory.buffer);
      this._memoryBufferView = new DataView(handleWasm.memory.buffer);
      this._keywordLabels = new Map();
      for (var i = 0; i < keywordLabels.length; i++) {
        this._keywordLabels.set(i, keywordLabels[i]);
      }
      this._processMutex = new Mutex();
      this._keywordDetectionCallback = keywordDetectionCallback;
      this._processErrorCallback = processErrorCallback;
    }
    /**
     * Get Porcupine engine version.
     */
    _createClass$1(Porcupine, [{
      key: "version",
      get: function get() {
        return Porcupine._version;
      }
      /**
       * Get frame length.
       */
    }, {
      key: "frameLength",
      get: function get() {
        return Porcupine._frameLength;
      }
      /**
       * Get sample rate.
       */
    }, {
      key: "sampleRate",
      get: function get() {
        return Porcupine._sampleRate;
      }
      /**
       * Get keyword labels.
       */
    }, {
      key: "keywordLabels",
      get: function get() {
        return this._keywordLabels;
      }
      /**
       * Creates an instance of the Porcupine wake word engine using either
       * a '.pv' file in public directory or a base64'd string.
       *
       * @param accessKey AccessKey generated by Picovoice Console.
       * @param keywords - Built-in or object containing a base64
       * representation of or path to public binary of a Porcupine keyword model and their sensitivities.
       * Can be provided as an array or a single keyword.
       * @param keywordDetectionCallback User-defined callback to run after a keyword is detected.
       * @param model object containing a base64 string
       * representation of or path to public binary of a Porcupine parameter model used to initialize Porcupine.
       * @param model.base64 The model in base64 string to initialize Leopard.
       * @param model.publicPath The model path relative to the public directory.
       * @param model.customWritePath Custom path to save the model in storage.
       * Set to a different name to use multiple models across `Porcupine` instances.
       * @param model.forceWrite Flag to overwrite the model in storage even if it exists.
       * @param model.version Leopard model version. Set to a higher number to update the model file.
       * @param options Optional configuration arguments, see PorcupineOptions for details.
       *
       * @returns An instance of the Porcupine engine.
       */
    }, {
      key: "process",
      value:
      /**
       * Processes a frame of audio. The required sample rate can be retrieved from '.sampleRate' and the length
       * of frame (number of audio samples per frame) can be retrieved from '.frameLength' The audio needs to be
       * 16-bit linearly-encoded. Furthermore, the engine operates on single-channel audio.
       *
       * @param pcm A frame of audio with properties described above.
       */
      function () {
        var _process = _asyncToGenerator$1( /*#__PURE__*/regenerator$1.mark(function _callee2(pcm) {
          var _this = this;
          var error;
          return regenerator$1.wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                if (!(pcm instanceof Int16Array)) {
                  error = new Error("The argument 'pcm' must be provided as an Int16Array");
                  if (this._processErrorCallback) {
                    this._processErrorCallback(error.toString());
                  } else {
                    // eslint-disable-next-line no-console
                    console.error(error);
                  }
                }
                this._processMutex.runExclusive( /*#__PURE__*/_asyncToGenerator$1( /*#__PURE__*/regenerator$1.mark(function _callee() {
                  var status, memoryBuffer, keywordIndex, _this$_keywordLabels$;
                  return regenerator$1.wrap(function _callee$(_context) {
                    while (1) switch (_context.prev = _context.next) {
                      case 0:
                        if (!(_this._wasmMemory === undefined)) {
                          _context.next = 2;
                          break;
                        }
                        throw new Error('Attempted to call Porcupine process after release.');
                      case 2:
                        _this._memoryBuffer.set(pcm, _this._inputBufferAddress / Int16Array.BYTES_PER_ELEMENT);
                        _context.next = 5;
                        return _this._pvPorcupineProcess(_this._objectAddress, _this._inputBufferAddress, _this._keywordIndexAddress);
                      case 5:
                        status = _context.sent;
                        if (!(status !== PV_STATUS_SUCCESS)) {
                          _context.next = 18;
                          break;
                        }
                        memoryBuffer = new Uint8Array(_this._wasmMemory.buffer);
                        _context.t0 = Error;
                        _context.t1 = "process failed with status ";
                        _context.t2 = arrayBufferToStringAtIndex;
                        _context.t3 = memoryBuffer;
                        _context.next = 14;
                        return _this._pvStatusToString(status);
                      case 14:
                        _context.t4 = _context.sent;
                        _context.t5 = (0, _context.t2)(_context.t3, _context.t4);
                        _context.t6 = _context.t1.concat.call(_context.t1, _context.t5);
                        throw new _context.t0(_context.t6);
                      case 18:
                        keywordIndex = _this._memoryBufferView.getInt32(_this._keywordIndexAddress, true);
                        if (keywordIndex !== -1) {
                          _this._keywordDetectionCallback({
                            label: (_this$_keywordLabels$ = _this._keywordLabels.get(keywordIndex)) !== null && _this$_keywordLabels$ !== void 0 ? _this$_keywordLabels$ : '',
                            index: keywordIndex
                          });
                        }
                      case 20:
                      case "end":
                        return _context.stop();
                    }
                  }, _callee);
                })))["catch"](function (error) {
                  if (_this._processErrorCallback) {
                    _this._processErrorCallback(error.toString());
                  } else {
                    // eslint-disable-next-line no-console
                    console.error(error);
                  }
                });
              case 2:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this);
        }));
        function process(_x) {
          return _process.apply(this, arguments);
        }
        return process;
      }()
      /**
       * Releases resources acquired by WebAssembly module.
       */
    }, {
      key: "release",
      value: function () {
        var _release = _asyncToGenerator$1( /*#__PURE__*/regenerator$1.mark(function _callee3() {
          return regenerator$1.wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this._pvPorcupineDelete(this._objectAddress);
              case 2:
                _context3.next = 4;
                return this._pvFree(this._inputBufferAddress);
              case 4:
                _context3.next = 6;
                return this._pvFree(this._keywordIndexAddress);
              case 6:
                delete this._wasmMemory;
                this._wasmMemory = undefined;
              case 8:
              case "end":
                return _context3.stop();
            }
          }, _callee3, this);
        }));
        function release() {
          return _release.apply(this, arguments);
        }
        return release;
      }()
    }, {
      key: "onmessage",
      value: function () {
        var _onmessage = _asyncToGenerator$1( /*#__PURE__*/regenerator$1.mark(function _callee4(e) {
          return regenerator$1.wrap(function _callee4$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                _context4.t0 = e.data.command;
                _context4.next = _context4.t0 === 'process' ? 3 : 6;
                break;
              case 3:
                _context4.next = 5;
                return this.process(e.data.inputFrame);
              case 5:
                return _context4.abrupt("break", 7);
              case 6:
                // eslint-disable-next-line no-console
                console.warn("Unrecognized command: ".concat(e.data.command));
              case 7:
              case "end":
                return _context4.stop();
            }
          }, _callee4, this);
        }));
        function onmessage(_x2) {
          return _onmessage.apply(this, arguments);
        }
        return onmessage;
      }()
    }], [{
      key: "create",
      value: function () {
        var _create = _asyncToGenerator$1( /*#__PURE__*/regenerator$1.mark(function _callee5(accessKey, keywords, keywordDetectionCallback, model) {
          var _yield$keywordsProces,
            _yield$keywordsProces2,
            keywordPaths,
            keywordLabels,
            sensitivities,
            customWritePath,
            modelPath;
          return regenerator$1.wrap(function _callee5$(_context5) {
            while (1) switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 3;
                return keywordsProcess(keywords);
              case 3:
                _yield$keywordsProces = _context5.sent;
                _yield$keywordsProces2 = _slicedToArray(_yield$keywordsProces, 3);
                keywordPaths = _yield$keywordsProces2[0];
                keywordLabels = _yield$keywordsProces2[1];
                sensitivities = _yield$keywordsProces2[2];
                customWritePath = model.customWritePath ? model.customWritePath : 'porcupine_model';
                _context5.next = 11;
                return loadModel(_objectSpread$1(_objectSpread$1({}, model), {}, {
                  customWritePath: customWritePath
                }));
              case 11:
                modelPath = _context5.sent;
                return _context5.abrupt("return", this._init(accessKey, keywordPaths, keywordLabels, keywordDetectionCallback, sensitivities, modelPath));
              case 13:
              case "end":
                return _context5.stop();
            }
          }, _callee5, this);
        }));
        function create(_x3, _x4, _x5, _x6) {
          return _create.apply(this, arguments);
        }
        return create;
      }()
      /**
       * Set base64 wasm file.
       * @param wasm Base64'd wasm file to use to initialize wasm.
       */
    }, {
      key: "setWasm",
      value: function setWasm(wasm) {
        if (this._wasm === undefined) {
          this._wasm = wasm;
        }
      }
      /**
       * Set base64 wasm file with SIMD feature.
       * @param wasmSimd Base64'd wasm file to use to initialize wasm.
       */
    }, {
      key: "setWasmSimd",
      value: function setWasmSimd(wasmSimd) {
        if (this._wasmSimd === undefined) {
          this._wasmSimd = wasmSimd;
        }
      }
    }, {
      key: "_init",
      value: function () {
        var _init2 = _asyncToGenerator$1( /*#__PURE__*/regenerator$1.mark(function _callee7(accessKey, keywordPaths, keywordLabels, keywordDetectionCallback, sensitivities, modelPath) {
          var _this2 = this;
          var options,
            processErrorCallback,
            _args7 = arguments;
          return regenerator$1.wrap(function _callee7$(_context7) {
            while (1) switch (_context7.prev = _context7.next) {
              case 0:
                options = _args7.length > 6 && _args7[6] !== undefined ? _args7[6] : {};
                if (isAccessKeyValid(accessKey)) {
                  _context7.next = 3;
                  break;
                }
                throw new Error('Invalid AccessKey');
              case 3:
                if (!(keywordPaths.length !== keywordLabels.length || keywordPaths.length !== sensitivities.length)) {
                  _context7.next = 5;
                  break;
                }
                throw new Error("Number of keyword paths given (".concat(keywordPaths.length, ") does not match number of \n          keyword labels (").concat(keywordLabels.length, ") or sensitivities (").concat(sensitivities.length, ")"));
              case 5:
                processErrorCallback = options.processErrorCallback;
                return _context7.abrupt("return", new Promise(function (resolve, reject) {
                  Porcupine._porcupineMutex.runExclusive( /*#__PURE__*/_asyncToGenerator$1( /*#__PURE__*/regenerator$1.mark(function _callee6() {
                    var isSimd, wasmOutput;
                    return regenerator$1.wrap(function _callee6$(_context6) {
                      while (1) switch (_context6.prev = _context6.next) {
                        case 0:
                          _context6.next = 2;
                          return simd();
                        case 2:
                          isSimd = _context6.sent;
                          _context6.next = 5;
                          return Porcupine.initWasm(accessKey.trim(), isSimd ? _this2._wasmSimd : _this2._wasm, modelPath, keywordPaths, sensitivities);
                        case 5:
                          wasmOutput = _context6.sent;
                          return _context6.abrupt("return", new Porcupine(wasmOutput, keywordLabels, keywordDetectionCallback, processErrorCallback));
                        case 7:
                        case "end":
                          return _context6.stop();
                      }
                    }, _callee6);
                  }))).then(function (result) {
                    resolve(result);
                  })["catch"](function (error) {
                    reject(error);
                  });
                }));
              case 7:
              case "end":
                return _context7.stop();
            }
          }, _callee7);
        }));
        function _init(_x7, _x8, _x9, _x10, _x11, _x12) {
          return _init2.apply(this, arguments);
        }
        return _init;
      }()
    }, {
      key: "initWasm",
      value: function () {
        var _initWasm = _asyncToGenerator$1( /*#__PURE__*/regenerator$1.mark(function _callee8(accessKey, wasmBase64, modelPath, keywordPaths, sensitivities) {
          var memory, memoryBufferUint8, memoryBufferInt32, memoryBufferFloat32, pvError, exports, aligned_alloc, pv_free, pv_porcupine_version, pv_porcupine_frame_length, pv_porcupine_process, pv_porcupine_delete, pv_porcupine_init, pv_status_to_string, pv_sample_rate, objectAddressAddress, accessKeyAddress, i, modelPathEncoded, modelPathAddress, keywordPathsAddressAddress, keywordPathsAddressList, _iterator, _step, keywordPath, keywordPathEncoded, keywordPathAddress, sensitivityAddress, keywordIndexAddress, status, msg, memoryBufferView, objectAddress, sampleRate, frameLength, versionAddress, version, inputBufferAddress;
          return regenerator$1.wrap(function _callee8$(_context8) {
            while (1) switch (_context8.prev = _context8.next) {
              case 0:
                // A WebAssembly page has a constant size of 64KiB. -> 1MiB ~= 16 pages
                // minimum memory requirements for init: 17 pages
                memory = new WebAssembly.Memory({
                  initial: 128
                });
                memoryBufferUint8 = new Uint8Array(memory.buffer);
                memoryBufferInt32 = new Int32Array(memory.buffer);
                memoryBufferFloat32 = new Float32Array(memory.buffer);
                pvError = new PvError();
                _context8.next = 7;
                return buildWasm(memory, wasmBase64, pvError);
              case 7:
                exports = _context8.sent;
                aligned_alloc = exports.aligned_alloc;
                pv_free = exports.pv_free;
                pv_porcupine_version = exports.pv_porcupine_version;
                pv_porcupine_frame_length = exports.pv_porcupine_frame_length;
                pv_porcupine_process = exports.pv_porcupine_process;
                pv_porcupine_delete = exports.pv_porcupine_delete;
                pv_porcupine_init = exports.pv_porcupine_init;
                pv_status_to_string = exports.pv_status_to_string;
                pv_sample_rate = exports.pv_sample_rate; // acquire and init memory for c_object
                _context8.next = 19;
                return aligned_alloc(Int32Array.BYTES_PER_ELEMENT, Int32Array.BYTES_PER_ELEMENT);
              case 19:
                objectAddressAddress = _context8.sent;
                if (!(objectAddressAddress === 0)) {
                  _context8.next = 22;
                  break;
                }
                throw new Error('malloc failed: Cannot allocate memory');
              case 22:
                _context8.next = 24;
                return aligned_alloc(Uint8Array.BYTES_PER_ELEMENT, (accessKey.length + 1) * Uint8Array.BYTES_PER_ELEMENT);
              case 24:
                accessKeyAddress = _context8.sent;
                if (!(accessKeyAddress === 0)) {
                  _context8.next = 27;
                  break;
                }
                throw new Error('malloc failed: Cannot allocate memory');
              case 27:
                for (i = 0; i < accessKey.length; i++) {
                  memoryBufferUint8[accessKeyAddress + i] = accessKey.charCodeAt(i);
                }
                memoryBufferUint8[accessKeyAddress + accessKey.length] = 0;
                modelPathEncoded = new TextEncoder().encode(modelPath); // acquire and init memory for c_model_path
                _context8.next = 32;
                return aligned_alloc(Uint8Array.BYTES_PER_ELEMENT, (modelPathEncoded.length + 1) * Uint8Array.BYTES_PER_ELEMENT);
              case 32:
                modelPathAddress = _context8.sent;
                if (!(modelPathAddress === 0)) {
                  _context8.next = 35;
                  break;
                }
                throw new Error('malloc failed: Cannot allocate memory');
              case 35:
                memoryBufferUint8.set(modelPathEncoded, modelPathAddress);
                memoryBufferUint8[modelPathAddress + modelPathEncoded.length] = 0;
                // acquire and init memory for c_keyword_paths
                _context8.next = 39;
                return aligned_alloc(Int32Array.BYTES_PER_ELEMENT, keywordPaths.length * Int32Array.BYTES_PER_ELEMENT);
              case 39:
                keywordPathsAddressAddress = _context8.sent;
                if (!(keywordPathsAddressAddress === 0)) {
                  _context8.next = 42;
                  break;
                }
                throw new Error('malloc failed: Cannot allocate memory');
              case 42:
                keywordPathsAddressList = [];
                _iterator = _createForOfIteratorHelper(keywordPaths);
                _context8.prev = 44;
                _iterator.s();
              case 46:
                if ((_step = _iterator.n()).done) {
                  _context8.next = 59;
                  break;
                }
                keywordPath = _step.value;
                keywordPathEncoded = new TextEncoder().encode(keywordPath);
                _context8.next = 51;
                return aligned_alloc(Uint8Array.BYTES_PER_ELEMENT, (keywordPathEncoded.length + 1) * Uint8Array.BYTES_PER_ELEMENT);
              case 51:
                keywordPathAddress = _context8.sent;
                if (!(keywordPathAddress === 0)) {
                  _context8.next = 54;
                  break;
                }
                throw new Error('malloc failed: Cannot allocate memory');
              case 54:
                memoryBufferUint8.set(keywordPathEncoded, keywordPathAddress);
                memoryBufferUint8[keywordPathAddress + keywordPathEncoded.length] = 0;
                keywordPathsAddressList.push(keywordPathAddress);
              case 57:
                _context8.next = 46;
                break;
              case 59:
                _context8.next = 64;
                break;
              case 61:
                _context8.prev = 61;
                _context8.t0 = _context8["catch"](44);
                _iterator.e(_context8.t0);
              case 64:
                _context8.prev = 64;
                _iterator.f();
                return _context8.finish(64);
              case 67:
                memoryBufferInt32.set(new Int32Array(keywordPathsAddressList), keywordPathsAddressAddress / Int32Array.BYTES_PER_ELEMENT);
                _context8.next = 70;
                return aligned_alloc(Float32Array.BYTES_PER_ELEMENT, keywordPaths.length * Float32Array.BYTES_PER_ELEMENT);
              case 70:
                sensitivityAddress = _context8.sent;
                if (!(sensitivityAddress === 0)) {
                  _context8.next = 73;
                  break;
                }
                throw new Error('malloc failed: Cannot allocate memory');
              case 73:
                memoryBufferFloat32.set(sensitivities, sensitivityAddress / Float32Array.BYTES_PER_ELEMENT);
                _context8.next = 76;
                return aligned_alloc(Int32Array.BYTES_PER_ELEMENT, Int32Array.BYTES_PER_ELEMENT);
              case 76:
                keywordIndexAddress = _context8.sent;
                if (!(keywordIndexAddress === 0)) {
                  _context8.next = 79;
                  break;
                }
                throw new Error('malloc failed: Cannot allocate memory');
              case 79:
                _context8.next = 81;
                return pv_porcupine_init(accessKeyAddress, modelPathAddress, keywordPaths.length, keywordPathsAddressAddress, sensitivityAddress, objectAddressAddress);
              case 81:
                status = _context8.sent;
                _context8.next = 84;
                return pv_free(accessKeyAddress);
              case 84:
                _context8.next = 86;
                return pv_free(modelPathAddress);
              case 86:
                _context8.next = 88;
                return pv_free(keywordPathsAddressAddress);
              case 88:
                _context8.next = 90;
                return pv_free(sensitivityAddress);
              case 90:
                if (!(status !== PV_STATUS_SUCCESS)) {
                  _context8.next = 100;
                  break;
                }
                _context8.t1 = "'pv_porcupine_init' failed with status ";
                _context8.t2 = arrayBufferToStringAtIndex;
                _context8.t3 = memoryBufferUint8;
                _context8.next = 96;
                return pv_status_to_string(status);
              case 96:
                _context8.t4 = _context8.sent;
                _context8.t5 = (0, _context8.t2)(_context8.t3, _context8.t4);
                msg = _context8.t1.concat.call(_context8.t1, _context8.t5);
                throw new Error("".concat(msg, "\nDetails: ").concat(pvError.getErrorString()));
              case 100:
                memoryBufferView = new DataView(memory.buffer);
                objectAddress = memoryBufferView.getInt32(objectAddressAddress, true);
                _context8.next = 104;
                return pv_free(objectAddressAddress);
              case 104:
                _context8.next = 106;
                return pv_sample_rate();
              case 106:
                sampleRate = _context8.sent;
                _context8.next = 109;
                return pv_porcupine_frame_length();
              case 109:
                frameLength = _context8.sent;
                _context8.next = 112;
                return pv_porcupine_version();
              case 112:
                versionAddress = _context8.sent;
                version = arrayBufferToStringAtIndex(memoryBufferUint8, versionAddress);
                _context8.next = 116;
                return aligned_alloc(Int16Array.BYTES_PER_ELEMENT, frameLength * Int16Array.BYTES_PER_ELEMENT);
              case 116:
                inputBufferAddress = _context8.sent;
                if (!(inputBufferAddress === 0)) {
                  _context8.next = 119;
                  break;
                }
                throw new Error('malloc failed: Cannot allocate memory');
              case 119:
                return _context8.abrupt("return", {
                  aligned_alloc: aligned_alloc,
                  memory: memory,
                  pvFree: pv_free,
                  frameLength: frameLength,
                  sampleRate: sampleRate,
                  version: version,
                  inputBufferAddress: inputBufferAddress,
                  keywordIndexAddress: keywordIndexAddress,
                  objectAddress: objectAddress,
                  pvPorcupineDelete: pv_porcupine_delete,
                  pvPorcupineProcess: pv_porcupine_process,
                  pvStatusToString: pv_status_to_string
                });
              case 120:
              case "end":
                return _context8.stop();
            }
          }, _callee8, null, [[44, 61, 64, 67]]);
        }));
        function initWasm(_x13, _x14, _x15, _x16, _x17) {
          return _initWasm.apply(this, arguments);
        }
        return initWasm;
      }()
    }]);
    return Porcupine;
  }();
  _defineProperty$1(Porcupine, "_frameLength", void 0);
  _defineProperty$1(Porcupine, "_sampleRate", void 0);
  _defineProperty$1(Porcupine, "_version", void 0);
  _defineProperty$1(Porcupine, "_wasm", void 0);
  _defineProperty$1(Porcupine, "_wasmSimd", void 0);
  _defineProperty$1(Porcupine, "_porcupineMutex", new Mutex());

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }

  function decodeBase64(base64, enableUnicode) {
      var binaryString = atob(base64);
      if (enableUnicode) {
          var binaryView = new Uint8Array(binaryString.length);
          for (var i = 0, n = binaryString.length; i < n; ++i) {
              binaryView[i] = binaryString.charCodeAt(i);
          }
          return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
      }
      return binaryString;
  }

  function createURL(base64, sourcemapArg, enableUnicodeArg) {
      var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
      var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
      var source = decodeBase64(base64, enableUnicode);
      var start = source.indexOf('\n', 10) + 1;
      var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
      var blob = new Blob([body], { type: 'application/javascript' });
      return URL.createObjectURL(blob);
  }

  function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
      var url;
      return function WorkerFactory(options) {
          url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
          return new Worker(url, options);
      };
  }

  var WorkerFactory = createBase64WorkerFactory('', null, false);
  /* eslint-enable */

  var _excluded = ["processErrorCallback"];
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var PorcupineWorker = /*#__PURE__*/function () {
    function PorcupineWorker(worker, version, frameLength, sampleRate) {
      _classCallCheck$1(this, PorcupineWorker);
      _defineProperty$1(this, "_worker", void 0);
      _defineProperty$1(this, "_version", void 0);
      _defineProperty$1(this, "_frameLength", void 0);
      _defineProperty$1(this, "_sampleRate", void 0);
      this._worker = worker;
      this._version = version;
      this._frameLength = frameLength;
      this._sampleRate = sampleRate;
    }
    /**
     * Get Porcupine engine version.
     */
    _createClass$1(PorcupineWorker, [{
      key: "version",
      get: function get() {
        return this._version;
      }
      /**
       * Get Porcupine frame length.
       */
    }, {
      key: "frameLength",
      get: function get() {
        return this._frameLength;
      }
      /**
       * Get sample rate.
       */
    }, {
      key: "sampleRate",
      get: function get() {
        return this._sampleRate;
      }
      /**
       * Get Porcupine worker instance.
       */
    }, {
      key: "worker",
      get: function get() {
        return this._worker;
      }
      /**
       * Creates an instance of the Porcupine wake word engine using either
       * a '.pv' file in public directory or a base64'd string.
       * The model size is large, hence it will try to use the existing one
       * if it exists, otherwise saves the model in storage.
       *
       * @param accessKey AccessKey generated by Picovoice Console.
       * @param keywords - Built-in or Base64
       * representations of keywords and their sensitivities.
       * Can be provided as an array or a single keyword.
       * @param keywordDetectionCallback - User-defined callback invoked upon detection of the wake phrase.
       * The only input argument is the index of detected keyword (phrase).
       * @param model object containing a base64 string
       * representation of or path to public binary of a Porcupine parameter model used to initialize Porcupine.
       * @param model.base64 The model in base64 string to initialize Leopard.
       * @param model.publicPath The model path relative to the public directory.
       * @param model.customWritePath Custom path to save the model in storage.
       * Set to a different name to use multiple models across `Porcupine` instances.
       * @param model.forceWrite Flag to overwrite the model in storage even if it exists.
       * @param model.version Leopard model version. Set to a higher number to update the model file.
       * @param options Optional configuration arguments.
       * @param options.processErrorCallback User-defined callback invoked if any error happens
       * while processing the audio stream. Its only input argument is the error message.
       *
       * @returns An instance of PorcupineWorker.
       */
    }, {
      key: "process",
      value:
      /**
       * Processes a frame of audio in a worker.
       * The transcript result will be supplied with the callback provided when initializing the worker either
       * by 'fromBase64' or 'fromPublicDirectory'.
       * Can also send a message directly using 'this.worker.postMessage({command: "process", pcm: [...]})'.
       *
       * @param pcm A frame of audio sample.
       */
      function process(pcm) {
        this._worker.postMessage({
          command: 'process',
          inputFrame: pcm
        });
      }
      /**
       * Releases resources acquired by WebAssembly module.
       */
    }, {
      key: "release",
      value: function release() {
        var _this = this;
        var returnPromise = new Promise(function (resolve, reject) {
          _this._worker.onmessage = function (event) {
            switch (event.data.command) {
              case 'ok':
                resolve();
                break;
              case 'failed':
              case 'error':
                reject(event.data.message);
                break;
              default:
                // @ts-ignore
                reject("Unrecognized command: ".concat(event.data.command));
            }
          };
        });
        this._worker.postMessage({
          command: 'release'
        });
        return returnPromise;
      }
      /**
       * Terminates the active worker. Stops all requests being handled by worker.
       */
    }, {
      key: "terminate",
      value: function terminate() {
        this._worker.terminate();
      }
    }], [{
      key: "create",
      value: function () {
        var _create = _asyncToGenerator$1( /*#__PURE__*/regenerator$1.mark(function _callee(accessKey, keywords, keywordDetectionCallback, model) {
          var _this2 = this;
          var options,
            _yield$keywordsProces,
            _yield$keywordsProces2,
            keywordPaths,
            keywordLabels,
            sensitivities,
            customWritePath,
            modelPath,
            processErrorCallback,
            workerOptions,
            worker,
            returnPromise,
            _args = arguments;
          return regenerator$1.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 4 && _args[4] !== undefined ? _args[4] : {};
                _context.next = 3;
                return keywordsProcess(keywords);
              case 3:
                _yield$keywordsProces = _context.sent;
                _yield$keywordsProces2 = _slicedToArray(_yield$keywordsProces, 3);
                keywordPaths = _yield$keywordsProces2[0];
                keywordLabels = _yield$keywordsProces2[1];
                sensitivities = _yield$keywordsProces2[2];
                customWritePath = model.customWritePath ? model.customWritePath : 'porcupine_model';
                _context.next = 11;
                return loadModel(_objectSpread(_objectSpread({}, model), {}, {
                  customWritePath: customWritePath
                }));
              case 11:
                modelPath = _context.sent;
                processErrorCallback = options.processErrorCallback, workerOptions = _objectWithoutProperties(options, _excluded);
                worker = new WorkerFactory();
                returnPromise = new Promise(function (resolve, reject) {
                  // @ts-ignore - block from GC
                  _this2.worker = worker;
                  worker.onmessage = function (event) {
                    switch (event.data.command) {
                      case 'ok':
                        worker.onmessage = function (ev) {
                          switch (ev.data.command) {
                            case 'ok':
                              keywordDetectionCallback(ev.data.porcupineDetection);
                              break;
                            case 'failed':
                            case 'error':
                              if (processErrorCallback) {
                                processErrorCallback(ev.data.message);
                              } else {
                                // eslint-disable-next-line no-console
                                console.error(ev.data.message);
                              }
                              break;
                            default:
                              // @ts-ignore
                              processErrorCallback("Unrecognized command: ".concat(event.data.command));
                          }
                        };
                        resolve(new PorcupineWorker(worker, event.data.version, event.data.frameLength, event.data.sampleRate));
                        break;
                      case 'failed':
                      case 'error':
                        reject(event.data.message);
                        break;
                      default:
                        // @ts-ignore
                        reject("Unrecognized command: ".concat(event.data.command));
                    }
                  };
                });
                worker.postMessage({
                  command: 'init',
                  accessKey: accessKey,
                  modelPath: modelPath,
                  keywordPaths: keywordPaths,
                  keywordLabels: keywordLabels,
                  sensitivities: sensitivities,
                  wasm: this._wasm,
                  wasmSimd: this._wasmSimd,
                  options: workerOptions
                });
                return _context.abrupt("return", returnPromise);
              case 17:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));
        function create(_x, _x2, _x3, _x4) {
          return _create.apply(this, arguments);
        }
        return create;
      }()
      /**
       * Set base64 wasm file.
       * @param wasm Base64'd wasm file to use to initialize wasm.
       */
    }, {
      key: "setWasm",
      value: function setWasm(wasm) {
        if (this._wasm === undefined) {
          this._wasm = wasm;
        }
      }
      /**
       * Set base64 wasm file with SIMD feature.
       * @param wasmSimd Base64'd wasm file to use to initialize wasm.
       */
    }, {
      key: "setWasmSimd",
      value: function setWasmSimd(wasmSimd) {
        if (this._wasmSimd === undefined) {
          this._wasmSimd = wasmSimd;
        }
      }
    }]);
    return PorcupineWorker;
  }();
  _defineProperty$1(PorcupineWorker, "_wasm", void 0);
  _defineProperty$1(PorcupineWorker, "_wasmSimd", void 0);

  var porcupineWasm = "";

  var porcupineWasmSimd = "

  Porcupine.setWasm(porcupineWasm);
  Porcupine.setWasmSimd(porcupineWasmSimd);
  PorcupineWorker.setWasm(porcupineWasm);
  PorcupineWorker.setWasmSimd(porcupineWasmSimd);

  exports.Porcupine = Porcupine;
  exports.PorcupineWorker = PorcupineWorker;
  exports.keywordsProcess = keywordsProcess;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

})({});
